{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Setup","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>pip install mkdocs</code> - To install MkDocs.</li> <li><code>pip install mkdocs-material</code> - To install mkdocs-material.</li> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n     ...       # Other markdown pages, images and other files.\n              ...       # Other markdown pages, images and other files.\n                                ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/","title":"Sistemas Distribu\u00eddos","text":""},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#1-o-que-sao-sistemas-distribuidos-sd","title":"1. O que s\u00e3o Sistemas Distribu\u00eddos (SD)?","text":"<p>Um sistema distribu\u00eddo \u00e9 uma cole\u00e7\u00e3o de computadores aut\u00f4nomos que se comunicam atrav\u00e9s de uma rede, mas que, para o usu\u00e1rio final, funcionam como um \u00fanico sistema coerente. A ideia central \u00e9 que esses computadores trabalhem juntos para alcan\u00e7ar um objetivo comum. </p>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#2-tipos-de-sd-e-suas-implementacoes","title":"2. Tipos de SD e suas implementa\u00e7\u00f5es","text":""},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#21-modelos-arquiteturais-mais-usados","title":"2.1. Modelos Arquiteturais mais usados","text":"<p>Existem diferentes modelos arquitet\u00f4nicos que definem como os componentes de um sistema distribu\u00eddo interagem. A escolha do modelo impacta diretamente na escalabilidade, na toler\u00e2ncia a falhas e na complexidade do sistema.</p>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#cliente-servidor","title":"Cliente-Servidor","text":"<p>Este \u00e9 o modelo mais tradicional e amplamente utilizado. A arquitetura \u00e9 dividida em dois pap\u00e9is principais:</p> <ul> <li>Cliente: Um processo que requisita um servi\u00e7o, como um navegador web ou um aplicativo de celular. Ele inicia a comunica\u00e7\u00e3o.</li> <li>Servidor: Um processo que prov\u00ea um servi\u00e7o, aguardando requisi\u00e7\u00f5es, processando-as e enviando uma resposta.</li> </ul> <p>A grande vantagem \u00e9 a centraliza\u00e7\u00e3o da l\u00f3gica de neg\u00f3cio e dos dados no servidor, o que facilita o gerenciamento e a seguran\u00e7a. A desvantagem \u00e9 que o servidor pode se tornar um gargalo de desempenho e um ponto \u00fanico de falha se n\u00e3o houver redund\u00e2ncia.</p> <ul> <li>Exemplos: Navega\u00e7\u00e3o na internet, email, e acesso a bancos de dados.</li> </ul>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#peer-to-peer-p2p","title":"Peer-to-Peer (P2P)","text":"<p>Neste modelo, n\u00e3o h\u00e1 uma hierarquia fixa. Todos os participantes (chamados de peers) t\u00eam as mesmas responsabilidades, atuando como clientes e servidores ao mesmo tempo.</p> <ul> <li>Vantagens: O sistema \u00e9 altamente tolerante a falhas, pois a falha de um peer n\u00e3o afeta a funcionalidade geral. \u00c9 extremamente escal\u00e1vel e eficiente para compartilhamento de recursos, j\u00e1 que a capacidade da rede cresce com o n\u00famero de peers.</li> <li> <p>Desvantagens: A seguran\u00e7a e a consist\u00eancia dos dados s\u00e3o mais dif\u00edceis de garantir sem um controle central.</p> </li> <li> <p>Exemplos: Redes de compartilhamento de arquivos como o BitTorrent e redes de criptomoedas como o Bitcoin.</p> </li> </ul>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#modelo-em-camadas-tiered","title":"Modelo em Camadas (Tiered)","text":"<p>Este modelo organiza a arquitetura do sistema em camadas l\u00f3gicas distintas, separando responsabilidades. \u00c9 uma evolu\u00e7\u00e3o do modelo cliente-servidor para sistemas mais complexos. A arquitetura de tr\u00eas camadas (3-Tier) \u00e9 a mais comum:</p> <ol> <li>Camada de Apresenta\u00e7\u00e3o (Front-end): A interface do usu\u00e1rio.</li> <li>Camada de L\u00f3gica de Neg\u00f3cio (Back-end): Onde a l\u00f3gica da aplica\u00e7\u00e3o \u00e9 executada.</li> <li> <p>Camada de Dados: Respons\u00e1vel por armazenar e gerenciar os dados.</p> </li> <li> <p>Vantagens: A separa\u00e7\u00e3o de responsabilidades torna o sistema mais f\u00e1cil de gerenciar, manter e escalar, j\u00e1 que cada camada pode ser escalada independentemente.</p> </li> <li>Exemplos: A maioria dos aplicativos web modernos.</li> </ol>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#arquitetura-de-microsservicos","title":"Arquitetura de Microsservi\u00e7os","text":"<p>Esta \u00e9 uma abordagem moderna que quebra uma aplica\u00e7\u00e3o monol\u00edtica em um conjunto de pequenos servi\u00e7os independentes e fracamente acoplados.</p> <ul> <li>Vantagens: Cada servi\u00e7o pode ser desenvolvido, implantado e escalado de forma independente, permitindo que diferentes equipes trabalhem em paralelo. Al\u00e9m disso, cada servi\u00e7o pode ser constru\u00eddo com a tecnologia que melhor se adapta \u00e0 sua fun\u00e7\u00e3o.</li> <li> <p>Desvantagens: Aumenta muito a complexidade de gerenciamento. \u00c9 necess\u00e1rio lidar com a comunica\u00e7\u00e3o entre os servi\u00e7os e a consist\u00eancia de dados entre eles.</p> </li> <li> <p>Exemplos: Plataformas como Netflix e Amazon.</p> </li> </ul>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#3-as-principais-arquiteturas-eg-camadas-componentes-eventos-e-dados","title":"3. As principais arquiteturas (e.g. camadas, componentes, eventos e dados)","text":"<p>A arquitetura de um sistema distribu\u00eddo pode ser categorizada pela forma como seus componentes interagem.</p> <ul> <li>Arquiteturas baseadas em camadas: Como o modelo Tiered, separam a aplica\u00e7\u00e3o em camadas l\u00f3gicas, facilitando a manuten\u00e7\u00e3o e a escalabilidade.</li> <li>Arquiteturas baseadas em componentes: Focam na modularidade, onde cada componente \u00e9 uma unidade aut\u00f4noma com uma fun\u00e7\u00e3o espec\u00edfica.</li> <li>Arquiteturas baseadas em eventos: Os componentes se comunicam atrav\u00e9s de eventos (mensagens ass\u00edncronas), desacoplando os servi\u00e7os.</li> <li>Arquiteturas orientadas a dados: A comunica\u00e7\u00e3o se d\u00e1 por meio de um espa\u00e7o de dados compartilhado, onde os componentes acessam e modificam os dados.</li> </ul>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#4-como-os-processos-e-threads-distribuidos-funcionam","title":"4. Como os processos e threads distribu\u00eddos funcionam?","text":"<p>Em sistemas distribu\u00eddos, a comunica\u00e7\u00e3o entre processos e threads \u00e9 fundamental.</p> <ul> <li>Comunica\u00e7\u00e3o Cliente/Servidor: O modelo mais comum. Um processo cliente envia uma mensagem (requisi\u00e7\u00e3o) para um processo servidor, que a processa e envia uma resposta.</li> <li>Comunica\u00e7\u00e3o entre Processos (IPC): Mecanismos como sockets, chamadas de procedimento remoto (RPC) ou middleware de mensagens permitem que processos em computadores diferentes troquem informa\u00e7\u00f5es.</li> <li>Migra\u00e7\u00e3o de C\u00f3digo: Permite que o c\u00f3digo de um processo seja movido de um computador para outro em tempo de execu\u00e7\u00e3o, para balanceamento de carga ou toler\u00e2ncia a falhas.</li> </ul>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#5-nomeacao-de-entidades-em-sd","title":"5. Nomea\u00e7\u00e3o de entidades em SD","text":"<p>A nomea\u00e7\u00e3o \u00e9 o processo de mapear identificadores humanos para entidades do sistema distribu\u00eddo (como arquivos ou servi\u00e7os). O objetivo \u00e9 permitir que as entidades sejam localizadas e acessadas de forma transparente, independentemente de onde estejam. O DNS (Domain Name System) \u00e9 o exemplo mais conhecido, mapeando nomes de dom\u00ednio para endere\u00e7os IP.</p>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#6-sincronizacao-de-processosthreads-e-relogios-em-sd","title":"6. Sincroniza\u00e7\u00e3o de processos/threads e rel\u00f3gios em SD","text":"<p>Sincronizar eventos em sistemas distribu\u00eddos \u00e9 um grande desafio, pois n\u00e3o h\u00e1 um rel\u00f3gio global.</p> <ul> <li>Rel\u00f3gios F\u00edsicos: Protocolos como o NTP (Network Time Protocol) tentam manter os rel\u00f3gios dos computadores sincronizados com um servidor de tempo global.</li> <li>Rel\u00f3gios L\u00f3gicos: Uma abordagem mais comum. Eles se preocupam com a ordem dos eventos.<ul> <li>Rel\u00f3gios de Lamport: Atribuem um carimbo de tempo a cada evento.</li> <li>Rel\u00f3gios Vetoriais: Oferecem uma ordem de eventos mais precisa, que tamb\u00e9m captura a causalidade entre eles.</li> </ul> </li> <li>Sincroniza\u00e7\u00e3o de Processos/Threads: Mecanismos de exclus\u00e3o m\u00fatua distribu\u00edda garantem que apenas um processo por vez possa acessar um recurso compartilhado.</li> </ul>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#7-consistencia-e-replicacao","title":"7. Consist\u00eancia e Replica\u00e7\u00e3o","text":"<p>A replica\u00e7\u00e3o de dados (criar c\u00f3pias) \u00e9 usada para aumentar a disponibilidade e o desempenho, mas gera o problema da consist\u00eancia.</p> <ul> <li>Replica\u00e7\u00e3o: Aumenta a toler\u00e2ncia a falhas e a performance.</li> <li>Consist\u00eancia: Garante que todas as r\u00e9plicas de um dado sejam id\u00eanticas ou sigam um conjunto de regras.<ul> <li>Consist\u00eancia Forte: Uma escrita deve ser refletida em todas as r\u00e9plicas antes de ser considerada completa.</li> <li>Consist\u00eancia Eventual: As r\u00e9plicas podem ser inconsistentes temporariamente, mas, com o tempo, elas convergir\u00e3o para o mesmo estado. Este modelo \u00e9 mais escal\u00e1vel e usado em sistemas modernos como bancos de dados NoSQL.</li> </ul> </li> </ul>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#vantagens-e-desvantagens-dos-sistemas-distribuidos","title":"Vantagens e Desvantagens dos Sistemas Distribu\u00eddos","text":""},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#vantagens","title":"Vantagens","text":"<ul> <li>Escalabilidade: F\u00e1cil de adicionar novos computadores para lidar com o aumento da demanda.</li> <li>Toler\u00e2ncia a Falhas: A redund\u00e2ncia permite que o sistema continue funcionando mesmo com a falha de um componente.</li> <li>Melhoria de Desempenho e Custo-benef\u00edcio: O processamento paralelo acelera tarefas e \u00e9 mais econ\u00f4mico usar v\u00e1rios computadores comuns do que um \u00fanico computador muito potente.</li> </ul>"},{"location":"LDM/Sistemas%20Distribu%C3%ADdos/#desvantagens","title":"Desvantagens","text":"<ul> <li>Complexidade de Gerenciamento: Projetar e depurar sistemas distribu\u00eddos \u00e9 complexo.</li> <li>Seguran\u00e7a: Aumenta a superf\u00edcie de ataque, j\u00e1 que cada n\u00f3 \u00e9 uma potencial vulnerabilidade.</li> <li>Problemas de Rede: O desempenho e a consist\u00eancia podem ser afetados por problemas de conectividade.</li> <li>Custo de Desenvolvimento e Manuten\u00e7\u00e3o: Requer profissionais com habilidades especializadas.</li> </ul>"},{"location":"LDM/introdu%C3%A7%C3%A3o/","title":"Introdu\u00e7\u00e3o","text":""},{"location":"LDM/introdu%C3%A7%C3%A3o/#o-universo-do-desenvolvimento-cross-platform","title":"O Universo do Desenvolvimento Cross-Platform","text":"<p>O desenvolvimento de software vive em constante evolu\u00e7\u00e3o, impulsionado pela diversidade de dispositivos e sistemas operacionais. Nesse cen\u00e1rio, o desenvolvimento multiplataforma (ou cross-platform) surge como uma abordagem estrat\u00e9gica para criar solu\u00e7\u00f5es que funcionam em m\u00faltiplos ambientes, como iOS, Android e web, a partir de uma \u00fanica base de c\u00f3digo.</p>"},{"location":"LDM/introdu%C3%A7%C3%A3o/#definicao-e-conceito","title":"Defini\u00e7\u00e3o e Conceito","text":"<p>O conceito de desenvolvimento multiplataforma se baseia na cria\u00e7\u00e3o de um software que pode ser executado em diferentes plataformas sem a necessidade de ser reescrito para cada uma delas. Isso significa que, em vez de desenvolver um aplicativo separado para iOS e outro para Android, por exemplo, o desenvolvedor escreve o c\u00f3digo uma \u00fanica vez, e ele \u00e9 adaptado para funcionar em ambos os sistemas.</p> <p>Essa abordagem oferece uma resposta direta aos desafios impostos pela fragmenta\u00e7\u00e3o do mercado de tecnologia, permitindo que empresas e desenvolvedores alcancem um p\u00fablico mais amplo de forma mais eficiente.</p>"},{"location":"LDM/introdu%C3%A7%C3%A3o/#por-que-usar-vantagens-e-desvantagens","title":"Por que Usar? Vantagens e Desvantagens","text":"<p>A decis\u00e3o de adotar o desenvolvimento multiplataforma envolve a pondera\u00e7\u00e3o de seus pontos fortes e fracos.</p> <p>Vantagens:</p> <ul> <li>Reutiliza\u00e7\u00e3o de C\u00f3digo: A capacidade de compartilhar a mesma base de c\u00f3digo entre diferentes plataformas \u00e9 a principal vantagem. Isso otimiza o tempo de trabalho e reduz drasticamente o esfor\u00e7o de desenvolvimento.</li> <li>Redu\u00e7\u00e3o de Custos e Tempo: Com um \u00fanico projeto e uma \u00fanica equipe, os custos e o tempo de desenvolvimento e manuten\u00e7\u00e3o s\u00e3o consideravelmente menores. O tempo de lan\u00e7amento no mercado (time-to-market) tamb\u00e9m \u00e9 acelerado.</li> <li>Manuten\u00e7\u00e3o Centralizada: A manuten\u00e7\u00e3o do software \u00e9 simplificada. As atualiza\u00e7\u00f5es e corre\u00e7\u00f5es de bugs s\u00e3o aplicadas em um \u00fanico local e propagadas para todas as vers\u00f5es do aplicativo.</li> <li>Alcance de Mercado: Com o aplicativo dispon\u00edvel em diferentes lojas de aplicativos e sistemas operacionais, a visibilidade e o alcance da sua solu\u00e7\u00e3o s\u00e3o ampliados, permitindo que mais usu\u00e1rios tenham acesso a ela.</li> </ul> <p>Desvantagens:</p> <ul> <li>Limita\u00e7\u00f5es de Recursos Nativos: Pode haver restri\u00e7\u00f5es no acesso a certas funcionalidades espec\u00edficas de um sistema operacional, como sensores avan\u00e7ados ou componentes de interface de usu\u00e1rio (UI) exclusivos.</li> <li>Desempenho: Em alguns casos, especialmente em aplicativos que exigem processamento intenso, o desempenho pode ser inferior ao de um aplicativo nativo. No entanto, ferramentas modernas como Flutter e React Native t\u00eam minimizado essa diferen\u00e7a.</li> <li>Experi\u00eancia do Usu\u00e1rio (UX): Embora a consist\u00eancia seja um ponto positivo, pode ser dif\u00edcil replicar a experi\u00eancia \"nativa\" exata que os usu\u00e1rios de cada plataforma est\u00e3o acostumados a ter.</li> </ul>"},{"location":"LDM/introdu%C3%A7%C3%A3o/#cross-platform-vs-nativo-o-dilema-da-escolha","title":"Cross-Platform vs. Nativo: O Dilema da Escolha","text":"<p>A escolha entre o desenvolvimento multiplataforma e o nativo n\u00e3o \u00e9 sobre qual \u00e9 melhor, mas sobre qual \u00e9 o mais adequado para o seu projeto.</p> <ul> <li>Desenvolvimento Nativo: O aplicativo \u00e9 constru\u00eddo com as linguagens e ferramentas espec\u00edficas de cada plataforma (por exemplo, Swift para iOS ou Java/Kotlin para Android). Isso garante o melhor desempenho, acesso total aos recursos do dispositivo e uma experi\u00eancia de usu\u00e1rio perfeitamente integrada. \u00c9 a escolha ideal para jogos, aplicativos com gr\u00e1ficos complexos ou que dependem de funcionalidades muito espec\u00edficas do sistema.</li> <li>Desenvolvimento Multiplataforma: A abordagem cross-platform prioriza a velocidade e o custo. \u00c9 perfeita para projetos com prazos apertados, or\u00e7amentos limitados e que buscam ter uma presen\u00e7a ampla no mercado sem um grande investimento inicial.</li> </ul>"},{"location":"LDM/introdu%C3%A7%C3%A3o/#ferramentas-e-frameworks-populares","title":"Ferramentas e Frameworks Populares","text":"<p>A popularidade do desenvolvimento multiplataforma se deve em grande parte \u00e0s poderosas ferramentas dispon\u00edveis. As mais not\u00e1veis s\u00e3o:</p> <ul> <li>Flutter: Desenvolvido pelo Google, utiliza a linguagem de programa\u00e7\u00e3o Dart. O Flutter \u00e9 conhecido por seu alto desempenho e por permitir a cria\u00e7\u00e3o de interfaces de usu\u00e1rio ricas e visualmente atraentes com facilidade.</li> <li>React Native: Criado pelo Facebook, utiliza a linguagem JavaScript e o framework React. Sua popularidade se d\u00e1, em grande parte, por permitir que desenvolvedores web aproveitem seus conhecimentos em JavaScript para criar aplicativos m\u00f3veis.</li> <li>Kotlin Multiplatform (KMP): Desenvolvido pela JetBrains, utiliza a linguagem Kotlin. Diferente de outras ferramentas, o foco principal do KMP \u00e9 compartilhar a l\u00f3gica de neg\u00f3cio (como regras de neg\u00f3cio, acesso a dados e camada de rede) entre as plataformas, enquanto a interface do usu\u00e1rio (UI) \u00e9 desenvolvida de forma nativa para cada sistema. Essa abordagem combina a efici\u00eancia do c\u00f3digo compartilhado com a experi\u00eancia de usu\u00e1rio nativa.</li> </ul> <p>Outras ferramentas como Xamarin, Ionic e PhoneGap tamb\u00e9m s\u00e3o mencionadas como op\u00e7\u00f5es v\u00e1lidas, cada uma com suas particularidades.</p> <p>Em resumo, a escolha do caminho a seguir deve ser feita ap\u00f3s uma an\u00e1lise cuidadosa dos objetivos e requisitos do projeto, priorizando a abordagem que melhor se alinha com as necessidades e limita\u00e7\u00f5es do seu contexto.</p>"},{"location":"PDMI/Hooks/Hooks/","title":"Hooks","text":""},{"location":"PDMI/Hooks/Hooks/#entendendo-a-revolucao-dos-componentes-funcionais","title":"Entendendo a Revolu\u00e7\u00e3o dos Componentes Funcionais \ud83c\udfa3","text":""},{"location":"PDMI/Hooks/Hooks/#o-que-sao-hooks","title":"O que s\u00e3o Hooks?","text":"<p>Hooks s\u00e3o fun\u00e7\u00f5es especiais introduzidas no React 16.8 (2019) que permitem usar estado, lifecycle methods e outros recursos do React sem classes. Eles \"conectam\" (hook into) a funcionalidade do React diretamente em componentes funcionais, simplificando a escrita e a organiza\u00e7\u00e3o do c\u00f3digo.  </p>"},{"location":"PDMI/Hooks/Hooks/#principais-hooks","title":"Principais Hooks","text":"<p>\ud83d\udd39 <code>useState</code>: Gerencia estados em componentes funcionais. \ud83d\udd39 <code>useEffect</code>: Executa efeitos colaterais (como chamadas API) ap\u00f3s renderiza\u00e7\u00e3o. \ud83d\udd39 <code>useContext</code>: Acessa o contexto global da aplica\u00e7\u00e3o. \ud83d\udd39 <code>useReducer</code>: Gerencia estados complexos com l\u00f3gica centralizada. \ud83d\udd39 <code>useRef</code>: Referencia elementos do DOM ou armazena valores mut\u00e1veis. \ud83d\udd39 Hooks Customizados: Fun\u00e7\u00f5es reutiliz\u00e1veis criadas por voc\u00ea (ex: <code>useFetch</code>).  </p>"},{"location":"PDMI/Hooks/Hooks/#por-que-os-hooks-foram-criados","title":"Por que os Hooks Foram Criados?","text":"<ol> <li>Problemas com Classes: </li> <li>Complexidade em reutilizar l\u00f3gica entre componentes.  </li> <li>Dificuldade em entender <code>this</code> e m\u00e9todos de lifecycle.  </li> <li>Objetivo dos Hooks: </li> <li>Simplificar componentes com fun\u00e7\u00f5es puras.  </li> <li>Facilitar o compartilhamento de l\u00f3gica entre componentes.  </li> </ol>"},{"location":"PDMI/Hooks/Hooks/#regras-dos-hooks","title":"Regras dos Hooks \ud83d\udea8","text":"<ol> <li>S\u00f3 use Hooks no Top-Level: </li> <li>N\u00e3o chame Hooks dentro de loops, condi\u00e7\u00f5es ou fun\u00e7\u00f5es aninhadas.  </li> <li>S\u00f3 use em Componentes Funcionais ou Custom Hooks: </li> <li>N\u00e3o funcionam em classes.  </li> </ol>"},{"location":"PDMI/Hooks/Hooks/#beneficios-dos-hooks","title":"Benef\u00edcios dos Hooks \u2728","text":"<p>\u2705 C\u00f3digo mais limpo: Menos boilerplate comparado a classes. \u2705 Reutiliza\u00e7\u00e3o de l\u00f3gica: Custom Hooks permitem compartilhar funcionalidades. \u2705 Organiza\u00e7\u00e3o: Separa\u00e7\u00e3o clara de preocupa\u00e7\u00f5es (ex: estado, efeitos). \u2705 Ado\u00e7\u00e3o gradual: Podem ser usados ao lado de componentes em classe.  </p>"},{"location":"PDMI/Hooks/Hooks/#exemplo-usestate-useeffect","title":"Exemplo: <code>useState</code> + <code>useEffect</code>","text":"<pre><code>    import { useState, useEffect } from 'react';  \n\n    function Timer() {  \n    const [seconds, setSeconds] = useState(0);  \n\n    useEffect(() =&gt; {  \n        const interval = setInterval(() =&gt; {  \n        setSeconds(prev =&gt; prev + 1);  \n        }, 1000);  \n\n        return () =&gt; clearInterval(interval); // Limpeza do efeito  \n    }, []); // Executa apenas uma vez (mount)  \n\n    return &lt;p&gt;Tempo: {seconds} segundos&lt;/p&gt;;  \n    }  \n</code></pre>"},{"location":"PDMI/Hooks/Hooks/#quando-usar-hooks","title":"Quando Usar Hooks?","text":"<p>\ud83d\udd39Componentes funcionais que precisam de estado ou efeitos. \ud83d\udd39Substituir componentes em classe para simplificar o c\u00f3digo. \ud83d\udd39Compartilhar l\u00f3gica entre m\u00faltiplos componentes (via Custom Hooks).</p>"},{"location":"PDMI/Hooks/useEffect/","title":"<code>useEffect</code>","text":"<p>O useEffect \u00e9 um dos Hooks mais importantes do React e React Native. Vamos explic\u00e1-lo de forma simples e pr\u00e1tica com exemplos do seu projeto de conselhos.</p>"},{"location":"PDMI/Hooks/useEffect/#o-que-e-o-useeffect","title":"O que \u00e9 o useEffect?","text":"<p>\u00c9 um hook que permite executar efeitos colaterais em componentes funcionais. Pense nele como um substituto moderno para os m\u00e9todos de ciclo de vida (lifecycle) que existiam em componentes de classe.</p>"},{"location":"PDMI/Hooks/useEffect/#analogia-simples","title":"Analogia Simples","text":"<p>Imagine que seu componente \u00e9 uma cozinha:</p> <ul> <li>Os ingredientes (props e estado) s\u00e3o suas ferramentas</li> <li>O useEffect \u00e9 como um ajudante que faz tarefas extras quando:<ul> <li>Voc\u00ea entra na cozinha (montagem do componente)</li> <li>Voc\u00ea troca de ingredientes (atualiza\u00e7\u00e3o de depend\u00eancias)</li> <li>Voc\u00ea sai da cozinha (desmontagem do componente) </li> </ul> </li> </ul>"},{"location":"PDMI/Hooks/useEffect/#como-funciona-no-seu-codigo","title":"Como Funciona no Seu C\u00f3digo?","text":"<p>No seu componente AdviceCard, voc\u00ea usou:</p> <pre><code>useEffect(() =&gt; {\n   fetchAdvice(); \n}, []);\n</code></pre> <p>Partes do useEffect:</p> <ol> <li> <p>Fun\u00e7\u00e3o de efeito: O c\u00f3digo que ser\u00e1 executado    <pre><code>() =&gt; {\n   fetchAdvice();\n} \n</code></pre></p> </li> <li> <p>Array de depend\u00eancias: <code>[]</code> (vazio no exemplo)</p> <ul> <li>Controla quando o efeito deve ser executado novamente</li> </ul> </li> </ol>"},{"location":"PDMI/Hooks/useEffect/#os-3-comportamentos-principais","title":"Os 3 Comportamentos Principais","text":"<ol> <li> <p>Executar apenas na montagem (como no seu c\u00f3digo)    <pre><code>useEffect(() =&gt; {\n// C\u00f3digo executado uma vez quando o componente \u00e9 montado\n}, []); // Array vazio\n</code></pre></p> <ul> <li>No exemplo: Busca o primeiro conselho quando a tela \u00e9 aberta</li> </ul> </li> <li> <p>Executar quando vari\u00e1veis mudam    <pre><code>useEffect(() =&gt; {\n// C\u00f3digo executado sempre que 'algumaVariavel' mudar\n}, [algumaVariavel]);\n</code></pre></p> </li> <li> <p>Executar limpeza ao desmontar    <pre><code>useEffect(() =&gt; {\nconst timer = setInterval(() =&gt; {\n   // C\u00f3digo repetido\n}, 1000);\n\nreturn () =&gt; {\n   clearInterval(timer); // Limpeza quando o componente desmontar\n};\n}, []);\n</code></pre></p> <ul> <li>Aplicabilidade: Se voc\u00ea tivesse um timer para buscar conselhos automaticamente</li> </ul> </li> </ol>"},{"location":"PDMI/Hooks/useEffect/#exemplo-pratico","title":"Exemplo Pr\u00e1tico","text":""},{"location":"PDMI/Hooks/useEffect/#api","title":"Api","text":"<p>Documenta\u00e7\u00e3o</p>"},{"location":"PDMI/Hooks/useEffect/#1-estrutura-de-tipos-typesadvicets","title":"1. Estrutura de Tipos (types/advice.ts)","text":"<pre><code>export interface Slip {\n   id: number;\n   advice: string;\n}\n\nexport interface AdviceResponse {\n   slip: Slip;\n}\n</code></pre>"},{"location":"PDMI/Hooks/useEffect/#2-servico-de-api-servicesapits","title":"2. Servi\u00e7o de API (services/api.ts)","text":"<pre><code>import { AdviceResponse } from '../types/advice';\n\nexport const getRandomAdvice = async (): Promise&lt;AdviceResponse&gt; =&gt; {\ntry {\n   // Adicione um timestamp para evitar cache\n   const response = await fetch(`https://api.adviceslip.com/advice?t=${Date.now()}`);\n\n   if (!response.ok) {\n      throw new Error('Erro ao buscar conselho');\n   }\n\n   return await response.json();\n} catch (error) {\n   console.error('Erro na chamada da API:', error);\n   throw error;\n}\n};\n</code></pre>"},{"location":"PDMI/Hooks/useEffect/#3-componente-advicecard-componentsadvicecardtsx","title":"3. Componente AdviceCard (components/AdviceCard.tsx)","text":"<pre><code>import { getRandomAdvice } from '@/services/api';\nimport { Slip } from '@/types/advice';\nimport React, { useState, useEffect } from 'react';\nimport { \n   View, \n   Text, \n   StyleSheet, \n   TouchableOpacity, \n   ActivityIndicator \n} from 'react-native';\n\nconst AdviceCard = () =&gt; {\nconst [advice, setAdvice] = useState&lt;Slip | null&gt;(null);\nconst [loading, setLoading] = useState&lt;boolean&gt;(false);\nconst [error, setError] = useState&lt;string | null&gt;(null);\n\nconst fetchAdvice = async () =&gt; {\n   try {\n      setLoading(true);\n      setError(null);\n      const response = await getRandomAdvice();\n      setAdvice(response.slip);\n\n   } catch (err) {\n      setError('Falha ao carregar conselho. Tente novamente.');\n      console.error(err);\n   } finally {\n      setLoading(false);\n   }\n};\n\nuseEffect(() =&gt; {\n   fetchAdvice();\n}, []);\n\nif (loading &amp;&amp; !advice) {\n   return &lt;ActivityIndicator size=\"large\" /&gt;;\n}\n\nreturn (\n   &lt;View style={styles.container}&gt;\n      {error ? (\n      &lt;&gt;\n         &lt;Text style={styles.errorText}&gt;{error}&lt;/Text&gt;\n         &lt;TouchableOpacity onPress={fetchAdvice} style={styles.button}&gt;\n            &lt;Text style={styles.buttonText}&gt;Tentar novamente&lt;/Text&gt;\n         &lt;/TouchableOpacity&gt;\n      &lt;/&gt;\n      ) : (\n      &lt;&gt;\n         &lt;Text style={styles.title}&gt;Conselho #{advice?.id}&lt;/Text&gt;\n         &lt;Text style={styles.adviceText}&gt;\"{advice?.advice}\"&lt;/Text&gt;\n\n         &lt;TouchableOpacity onPress={fetchAdvice} style={styles.button}&gt;\n            &lt;Text style={styles.buttonText}&gt;Obter novo conselho&lt;/Text&gt;\n         &lt;/TouchableOpacity&gt;\n      &lt;/&gt;\n      )}\n   &lt;/View&gt;\n);\n};\n\nconst styles = StyleSheet.create({\ncontainer: {\n   padding: 20,\n   backgroundColor: '#f8f9fa',\n   borderRadius: 10,\n   margin: 20,\n   alignItems: 'center',\n},\ntitle: {\n   fontSize: 18,\n   fontWeight: 'bold',\n   marginBottom: 10,\n},\nadviceText: {\n   fontSize: 16,\n   fontStyle: 'italic',\n   textAlign: 'center',\n   marginBottom: 20,\n},\nbutton: {\n   backgroundColor: '#007bff',\n   padding: 10,\n   borderRadius: 5,\n   marginTop: 10,\n},\nbuttonText: {\n   color: 'white',\n},\nerrorText: {\n   color: 'red',\n   marginBottom: 10,\n},\n});\n\nexport default AdviceCard;\n</code></pre>"},{"location":"PDMI/Hooks/useState/","title":"<code>useState</code>","text":""},{"location":"PDMI/Hooks/useState/#gerenciamento-de-estado-com-usestate-no-react-native","title":"Gerenciamento de Estado com <code>useState</code> no React Native","text":""},{"location":"PDMI/Hooks/useState/#o-que-e-o-usestate","title":"O que \u00e9 o <code>useState</code>?","text":"<ul> <li>Hook do React para adicionar estado a componentes funcionais.  </li> <li>Retorna um valor (estado atual) e uma fun\u00e7\u00e3o para atualiz\u00e1-lo.  </li> <li>Ideal para estados locais e simples (ex: formul\u00e1rios, contadores, visibilidade de UI).  </li> </ul>"},{"location":"PDMI/Hooks/useState/#vantagens","title":"Vantagens","text":"<p>\u2705 Simplicidade: Facilita a cria\u00e7\u00e3o e atualiza\u00e7\u00e3o de estados sem classes. \u2705 Integra\u00e7\u00e3o: Funciona perfeitamente com outros Hooks (ex: <code>useEffect</code>). \u2705 Performance: Atualiza\u00e7\u00f5es eficientes com re-renderiza\u00e7\u00f5es otimizadas.  </p>"},{"location":"PDMI/Hooks/useState/#como-usar","title":"Como usar?","text":"<ol> <li> <p>Importe o Hook: <pre><code>import { useState } from 'react';  \n</code></pre></p> </li> <li> <p>Inicialize o estado: <pre><code>const [count, setCount] = useState(0); // Valor inicial: 0  \n</code></pre></p> </li> <li> <p>Atualize o estado: <pre><code>setCount(count + 1); // Atualiza para 1  \n</code></pre></p> </li> </ol>"},{"location":"PDMI/Hooks/useState/#exemplo-pratico","title":"Exemplo Pr\u00e1tico","text":"<pre><code> import { View, Text, Button } from 'react-native';  \n\n const Counter = () =&gt; {  \n const [count, setCount] = useState(0);  \n\n return (  \n     &lt;View&gt;  \n     &lt;Text&gt;Contador: {count}&lt;/Text&gt;  \n     &lt;Button  \n         title=\"Incrementar\"  \n         onPress={() =&gt; setCount(count + 1)}  \n     /&gt;  \n     &lt;/View&gt;  \n );  \n };  \n</code></pre>"},{"location":"PDMI/Hooks/useState/#dicas-importantes","title":"Dicas Importantes","text":"<ul> <li>Use para estados locais (escopo do componente).</li> <li>Evite objetos complexos; prefira m\u00faltiplos useState.</li> <li>Para estados globais, combine com Context API ou bibliotecas (ex: Redux). </li> </ul>"},{"location":"PDMI/Hooks/useState/#quando-utilizar","title":"Quando utilizar?","text":"<ul> <li>Controle de inputs, modais, dados tempor\u00e1rios.</li> <li>Componentes funcionais que precisam de estado simples.</li> <li>Evite para l\u00f3gicas complexas ou compartilhamento entre muitos componentes.</li> </ul>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/","title":"<code>Navega\u00e7\u00e3o</code>","text":""},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#navegacao-no-react-native","title":"Navega\u00e7\u00e3o no React Native","text":"<ul> <li>Reposit\u00f3rio</li> </ul>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#1-configuracao-inicial","title":"1. Configura\u00e7\u00e3o Inicial","text":"<p>1.1. Criar novo projeto    <pre><code>npx create-expo-app NavegacaoApp --template expo-template-blank-typescript\ncd NavegacaoApp\n</code></pre></p> <p>1.2. Instalar depend\u00eancias    <pre><code>npm install @react-navigation/native @react-navigation/native-stack\n</code></pre></p>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#2-estrutura-do-projeto","title":"2. Estrutura do Projeto","text":"<pre><code>/src\n   /screens\n      Home.tsx\n      Profile.tsx\n      Settings.tsx\n   /types\n      navigationTypes.ts\n   /components\n      CustomButton.tsx\nApp.tsx\n</code></pre>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#3-configurando-tipos","title":"3. Configurando Tipos","text":"<p><code>types/navigationTypes.ts</code> <pre><code>export type RootStackParamList = {\n   Home: undefined;\n   Profile: { name: string };\n   Settings: undefined;\n};\n\ndeclare global {\n   namespace ReactNavigation {\n      interface RootParamList extends RootStackParamList {}\n   }\n}\n</code></pre></p>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#4-criando-componentes-de-tela","title":"4. Criando Componentes de Tela","text":""},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#screenshometsx","title":"<code>screens/Home.tsx</code>","text":"<pre><code>import React from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { RootStackParamList } from '../types/navigationTypes';\nimport { CustomButton } from '../components/CustomButton';\n\ntype Props = NativeStackScreenProps&lt;RootStackParamList, 'Home'&gt;;\n\nexport function HomeScreen({ navigation }: Props) {\nconst [name, setName] = React.useState('');\n\nreturn (\n   &lt;View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}&gt;\n      &lt;Text&gt;Home Screen&lt;/Text&gt;\n      &lt;TextInput\n      placeholder=\"Digite seu nome\"\n      value={name}\n      onChangeText={setName}\n      style={{ borderWidth: 1, padding: 10, margin: 10, width: 200 }}\n      /&gt;\n      &lt;CustomButton\n      title=\"Ir para Perfil\"\n      onPress={() =&gt; navigation.navigate('Profile', { name })}\n      /&gt;\n      &lt;CustomButton\n      title=\"Abrir Configura\u00e7\u00f5es\"\n      onPress={() =&gt; navigation.navigate('Settings')}\n      /&gt;\n   &lt;/View&gt;\n);\n}\n</code></pre>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#5-configurando-o-navegador","title":"5. Configurando o Navegador","text":""},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#apptsx","title":"<code>App.tsx</code>","text":"<pre><code>import { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { HomeScreen } from './src/screens/Home';\nimport { RootStackParamList } from './src/types/navigationTypes';\nimport { ProfileScreen } from './src/screens/Profile';\nimport { SettingsScreen } from './src/screens/Settings';\n\nconst Stack = createNativeStackNavigator&lt;RootStackParamList&gt;();\n\nexport default function App() {\nreturn (\n   &lt;NavigationContainer&gt;\n      &lt;Stack.Navigator initialRouteName=\"Home\"&gt;\n      &lt;Stack.Screen\n         name=\"Home\"\n         component={HomeScreen}\n         options={{ title: 'P\u00e1gina Inicial' }}\n      /&gt;\n      &lt;Stack.Screen\n         name=\"Profile\"\n         component={ProfileScreen}\n         options={({ route }) =&gt; ({ title: \"Perfil\"})}\n         /*  options={({ route }) =&gt; ({ title: route.params.name })} */\n      /&gt;\n      &lt;Stack.Screen\n         name=\"Settings\"\n         component={SettingsScreen}\n         options={{\n            headerStyle: {\n            backgroundColor: '#f4511e',\n            },\n            headerTintColor: '#fff',\n         }}\n      /&gt;\n      &lt;/Stack.Navigator&gt;\n   &lt;/NavigationContainer&gt;\n);\n}\n</code></pre>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#6-metodos-de-navegacao","title":"6. M\u00e9todos de Navega\u00e7\u00e3o","text":"<p>6.1. Navega\u00e7\u00e3o B\u00e1sica    <pre><code>// Navegar para nova tela\nnavigation.navigate('Profile', { name: 'Ana' });\n\n// Voltar\nnavigation.goBack();\n\n// Substituir tela atual\nnavigation.replace('Settings');\n\n// Voltar para primeira tela na pilha\nnavigation.popToTop();\n</code></pre></p> <p>6.2. Navega\u00e7\u00e3o com Push    <pre><code>// Adiciona nova tela \u00e0 pilha (mesma tela pode ser aberta m\u00faltiplas vezes)\nnavigation.push('Profile', { name: 'Segunda Tela' });\n</code></pre></p>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#7-passando-parametros","title":"7. Passando Par\u00e2metros","text":"<p>7.1. Enviando par\u00e2metros    <pre><code>// Navegar para nova tela\nnavigation.navigate('Profile', { name: 'Ana' });\n\n// Voltar\nnavigation.goBack();\n\n// Substituir tela atual\nnavigation.replace('Settings');\n\n// Voltar para primeira tela na pilha\nnavigation.popToTop();\n</code></pre></p> <p>7.2. Recebendo par\u00e2metros</p>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#profiletsx","title":"<code>Profile.tsx</code>","text":"<pre><code>import { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { RootStackParamList } from \"../types/navigationTypes\";\nimport { Text, View } from \"react-native\";\n\ntype ProfileProps = NativeStackScreenProps&lt;RootStackParamList, 'Profile'&gt;;\n\nexport function ProfileScreen({ route }: ProfileProps) {\nreturn (\n   &lt;View&gt;\n      &lt;Text&gt;Nome: {route.params.name}&lt;/Text&gt;\n   &lt;/View&gt;\n);\n}\n</code></pre>"},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#8-componente-de-botao-customizado","title":"8. Componente de Bot\u00e3o Customizado","text":""},{"location":"PDMI/Navega%C3%A7%C3%A3o/Navega%C3%A7%C3%A3o/#componentscustombuttontsx","title":"<code>components/CustomButton.tsx</code>","text":"<pre><code>import { TouchableOpacity, Text, StyleSheet } from 'react-native';\n\ntype Props = {\ntitle: string;\nonPress: () =&gt; void;\n};\n\nexport function CustomButton({ title, onPress }: Props) {\nreturn (\n   &lt;TouchableOpacity style={styles.button} onPress={onPress}&gt;\n      &lt;Text style={styles.text}&gt;{title}&lt;/Text&gt;\n   &lt;/TouchableOpacity&gt;\n);\n}\n\nconst styles = StyleSheet.create({\nbutton: {\n   backgroundColor: '#007AFF',\n   padding: 15,\n   borderRadius: 10,\n   margin: 10,\n   minWidth: 200,\n   alignItems: 'center',\n},\ntext: {\n   color: 'white',\n   fontSize: 16,\n},\n});\n</code></pre>"},{"location":"PDMI/Revis%C3%A3o/Gerenciamento%20de%20Estado/","title":"Gerenciamento de Estado","text":""},{"location":"PDMI/Revis%C3%A3o/Gerenciamento%20de%20Estado/#state-hosting-estado-elevado","title":"State Hosting (Estado Elevado)","text":"<p>O estado fica no componente pai e \u00e9 passado para os filhos via props.</p> <pre><code>// Estado no componente pai\nfunction TelaCarrinho() {\n  const [itens, setItens] = useState([]);\n  const [total, setTotal] = useState(0);\n\n  const adicionarItem = (item) =&gt; {\n    setItens([...itens, item]);\n    setTotal(total + item.preco);\n  };\n\n  return (\n    &lt;View&gt;\n      &lt;ListaItens itens={itens} /&gt;\n      &lt;BotaoAdicionar onAdicionar={adicionarItem} /&gt;\n      &lt;Total valor={total} /&gt;\n    &lt;/View&gt;\n  );\n}\n\nfunction ListaItens({ itens }) {\n  return (\n    &lt;View&gt;\n      {itens.map(item =&gt; &lt;Text key={item.id}&gt;{item.nome}&lt;/Text&gt;)}\n    &lt;/View&gt;\n  );\n}\n\nfunction BotaoAdicionar({ onAdicionar }) {\n  return (\n    &lt;Button \n      title=\"Adicionar Item\" \n      onPress={() =&gt; onAdicionar({ id: 1, nome: 'Produto', preco: 10 })}\n    /&gt;\n  );\n}\n\nfunction Total({ valor }) {\n  return &lt;Text&gt;Total: R$ {valor}&lt;/Text&gt;;\n}\n</code></pre> <p>Quando usar: Quando m\u00faltiplos componentes irm\u00e3os precisam compartilhar o mesmo estado.</p>"},{"location":"PDMI/Revis%C3%A3o/Gerenciamento%20de%20Estado/#persistent-state-estado-isolado","title":"Persistent State (Estado Isolado)","text":"<p>O estado fica isolado dentro do pr\u00f3prio componente.</p> <pre><code>// Estado isolado em cada componente\nfunction Contador({ titulo }) {\n  const [count, setCount] = useState(0); // Estado pr\u00f3prio\n\n  return (\n    &lt;View&gt;\n      &lt;Text&gt;{titulo}&lt;/Text&gt;\n      &lt;Text&gt;{count}&lt;/Text&gt;\n      &lt;Button title=\"+\" onPress={() =&gt; setCount(count + 1)} /&gt;\n      &lt;Button title=\"-\" onPress={() =&gt; setCount(count - 1)} /&gt;\n    &lt;/View&gt;\n  );\n}\n\nfunction InputBusca({ onBuscar }) {\n  const [termo, setTermo] = useState(''); // Estado pr\u00f3prio\n  const [loading, setLoading] = useState(false);\n\n  const buscar = () =&gt; {\n    setLoading(true);\n    onBuscar(termo);\n    setTimeout(() =&gt; setLoading(false), 1000);\n  };\n\n  return (\n    &lt;View&gt;\n      &lt;TextInput \n        value={termo}\n        onChangeText={setTermo}\n        placeholder=\"Buscar...\"\n      /&gt;\n      &lt;Button \n        title={loading ? \"Buscando...\" : \"Buscar\"}\n        onPress={buscar}\n        disabled={loading}\n      /&gt;\n    &lt;/View&gt;\n  );\n}\n\n// Uso dos componentes isolados\nfunction TelaExemplo() {\n  return (\n    &lt;View&gt;\n      &lt;Contador titulo=\"Contador A\" /&gt;\n      &lt;Contador titulo=\"Contador B\" /&gt;\n      &lt;InputBusca onBuscar={(termo) =&gt; console.log(termo)} /&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre> <p>Quando usar: Quando o componente \u00e9 independente e reutiliz\u00e1vel, sem necessidade de compartilhar estado.</p>"},{"location":"PDMI/Revis%C3%A3o/Gerenciamento%20de%20Estado/#resumo","title":"Resumo","text":"<ul> <li>State Hosting: Estado no pai \u2192 compartilhado entre filhos</li> <li>Persistent State: Estado no pr\u00f3prio componente \u2192 isolado e independente</li> </ul>"},{"location":"PDMII/1.%20Fundamentos/","title":"1. Fundamentos","text":""},{"location":"PDMII/1.%20Fundamentos/#fundamentos-da-linguagem-kotlin","title":"Fundamentos da Linguagem Kotlin","text":"<p>Conceitos te\u00f3ricos:</p> <ul> <li> <p>Val e Var: Vari\u00e1veis Mut\u00e1veis e Imut\u00e1veis: A regra de ouro no Kotlin \u00e9 preferir <code>val</code> sempre que poss\u00edvel. <code>val</code> \u00e9 de somente leitura, ou seja, ela n\u00e3o pode ser reatribu\u00edda. J\u00e1 <code>var</code> \u00e9 uma vari\u00e1vel que pode ter seu valor alterado ao longo do tempo.</p> <pre><code>// Vari\u00e1vel imut\u00e1vel\nval pi: Double = 3.14\n\n// Vari\u00e1vel mut\u00e1vel\nvar count: Int = 0 \n\ncount = 1 // Isso \u00e9 permitido\n// pi = 3.14159 // Isso causaria um erro de compila\u00e7\u00e3o\n</code></pre> </li> <li> <p>Null Safety: Um dos recursos mais importantes do Kotlin \u00e9 a sua prote\u00e7\u00e3o contra o temido <code>NullPointerException</code>. O sistema de tipos do Kotlin diferencia refer\u00eancias que podem ser nulas (<code>nullable</code>) daquelas que n\u00e3o podem ser (<code>non-nullable</code>).</p> <ul> <li><code>Non-nullable</code>: Uma vari\u00e1vel que n\u00e3o pode ser nula.</li> <li><code>Nullable</code>: Uma vari\u00e1vel que pode ser nula. Voc\u00ea precisa usar o operador <code>?</code> para declar\u00e1-la.</li> <li>Para usar uma vari\u00e1vel <code>nullable</code> com seguran\u00e7a, voc\u00ea utiliza o Safe Call (<code>?.</code>) ou o Elvis Operator (<code>?:</code>).</li> </ul> <pre><code>var nome: String = \"Jo\u00e3o\" // Non-nullable\nvar sobrenome: String? = null // Nullable\n\n// Safe Call: o c\u00f3digo s\u00f3 ser\u00e1 executado se a vari\u00e1vel n\u00e3o for nula\nval tamanho: Int? = sobrenome?.length\n\n// Elvis Operator: se a vari\u00e1vel for nula, o valor padr\u00e3o \u00e9 usado\nval tamanhoNaoNulo: Int = sobrenome?.length ?: 0\n</code></pre> </li> </ul>"},{"location":"PDMII/1.%20Fundamentos/#funcoes","title":"Fun\u00e7\u00f5es","text":"<p>S\u00e3o blocos de c\u00f3digo que realizam uma tarefa espec\u00edfica. S\u00e3o declaradas com a palavra-chave <code>fun</code>.</p> <pre><code>fun sayHello(name: String) {\n    println(\"Ol\u00e1, $name!\")\n}\n\nfun main() {\n    sayHello(\"Kotlin\")\n}\n</code></pre>"},{"location":"PDMII/1.%20Fundamentos/#colecoes-em-kotlin-list-set-map","title":"Cole\u00e7\u00f5es em Kotlin: <code>List</code>, <code>Set</code>, <code>Map</code>","text":"<p>Kotlin oferece cole\u00e7\u00f5es ricas e poderosas. A maioria delas \u00e9 imut\u00e1vel por padr\u00e3o, o que incentiva a escrita de c\u00f3digo mais seguro.</p> <ul> <li> <p><code>List</code>: Uma cole\u00e7\u00e3o ordenada de itens. Pode conter duplicatas.</p> <pre><code>val nomes = listOf(\"Jo\u00e3o\", \"Maria\", \"Pedro\") // Lista imut\u00e1vel\nval notas = mutableListOf(8, 7, 9) // Lista mut\u00e1vel\nnotas.add(10)\n</code></pre> </li> <li> <p><code>Set</code>: Uma cole\u00e7\u00e3o de itens \u00fanicos e desordenada.</p> <pre><code>val frutas = setOf(\"Ma\u00e7\u00e3\", \"Banana\", \"Morango\", \"Ma\u00e7\u00e3\")\n// frutas conter\u00e1 apenas \"Ma\u00e7\u00e3\", \"Banana\", \"Morango\"\n</code></pre> </li> <li> <p><code>Map</code> (Mapa): Uma cole\u00e7\u00e3o de pares de chave-valor. Cada chave \u00e9 \u00fanica.</p> <ul> <li> <p>Mapas Imut\u00e1veis: S\u00e3o criados com <code>mapOf</code>. Uma vez criados, seus pares de chave-valor n\u00e3o podem ser alterados.</p> <pre><code>val idades = mapOf(\"Jo\u00e3o\" to 30, \"Maria\" to 25)\n// idades[\"Jo\u00e3o\"] = 31 // Erro de compila\u00e7\u00e3o!\n</code></pre> </li> <li> <p>Mapas Mut\u00e1veis: S\u00e3o criados com <code>mutableMapOf</code>. Eles permitem a adi\u00e7\u00e3o, remo\u00e7\u00e3o e altera\u00e7\u00e3o de pares de chave-valor.</p> <pre><code>val alunos = mutableMapOf&lt;String, Int&gt;()\nalunos[\"Pedro\"] = 28\nalunos.put(\"Ana\", 22)\nalunos.remove(\"Pedro\")\n// alunos agora cont\u00e9m apenas um par: (\"Ana\" to 22)\n</code></pre> </li> </ul> </li> </ul>"},{"location":"PDMII/1.%20Fundamentos/#funcoes-de-ordem-superior-higher-order-functions-e-expressoes-lambda","title":"Fun\u00e7\u00f5es de Ordem Superior (<code>Higher-Order Functions</code>) e Express\u00f5es Lambda","text":"<p>Fun\u00e7\u00f5es de ordem superior s\u00e3o fun\u00e7\u00f5es que aceitam outras fun\u00e7\u00f5es como par\u00e2metro ou as retornam. As express\u00f5es lambda s\u00e3o uma forma concisa de escrever fun\u00e7\u00f5es an\u00f4nimas.</p> <ul> <li> <p><code>map</code>: Transforma cada item de uma cole\u00e7\u00e3o e retorna uma nova cole\u00e7\u00e3o com os resultados.</p> <pre><code>val numeros = listOf(1, 2, 3, 4)\nval quadrados = numeros.map { it * it } \n// quadrados ser\u00e1 [1, 4, 9, 16]\n</code></pre> </li> <li> <p><code>filter</code>: Cria uma nova cole\u00e7\u00e3o contendo apenas os elementos que satisfazem uma condi\u00e7\u00e3o.</p> <pre><code>val numeros = listOf(1, 2, 3, 4, 5, 6)\nval pares = numeros.filter { it % 2 == 0 }\n// pares ser\u00e1 [2, 4, 6]\n</code></pre> </li> <li> <p><code>forEach</code>: Executa uma a\u00e7\u00e3o para cada elemento da cole\u00e7\u00e3o.</p> <pre><code>val nomes = listOf(\"Ana\", \"Bruno\", \"Carlos\")\nnomes.forEach { println(\"Ol\u00e1, $it!\") }\n</code></pre> </li> </ul> <p>Atividade pr\u00e1tica 1: Manipula\u00e7\u00e3o de Dados em uma Lista</p> <ul> <li> <p>Objetivo: Crie uma lista de n\u00fameros inteiros. Use a fun\u00e7\u00e3o <code>filter</code> para extrair apenas os n\u00fameros pares e, em seguida, use <code>map</code> para multiplicar cada n\u00famero par por 2. Imprima a lista final.</p> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada: <code>listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</code></li> <li>Sa\u00edda Esperada: <code>[4, 8, 12, 16, 20]</code></li> </ul> </li> </ul> <p>Atividade pr\u00e1tica 2: Cadastro de Alunos</p> <ul> <li> <p>Objetivo: Crie um mapa mut\u00e1vel (<code>mutableMapOf</code>) para armazenar o nome e a nota de alunos. Adicione tr\u00eas alunos, remova um deles e atualize a nota de outro. Imprima o mapa final para verificar as altera\u00e7\u00f5es.</p> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada:<ol> <li>Adicione <code>\"Ana\"</code> com nota <code>8.5</code>.</li> <li>Adicione <code>\"Bruno\"</code> com nota <code>7.0</code>.</li> <li>Adicione <code>\"Carlos\"</code> com nota <code>9.5</code>.</li> <li>Remova <code>\"Bruno\"</code>.</li> <li>Atualize a nota de <code>\"Ana\"</code> para <code>9.0</code>.</li> </ol> </li> <li>Sa\u00edda Esperada: <code>{Ana=9.0, Carlos=9.5}</code></li> </ul> </li> </ul> <p>Atividade pr\u00e1tica 3: Processamento de Strings</p> <ul> <li> <p>Objetivo: Crie uma lista de strings. Use a fun\u00e7\u00e3o <code>filter</code> para extrair apenas as strings que cont\u00eam a letra 'a', independente de ser mai\u00fascula ou min\u00fascula. Em seguida, use a fun\u00e7\u00e3o <code>forEach</code> para imprimir cada uma das strings filtradas, em uma nova linha.</p> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada: <code>listOf(\"Kotlin\", \"Android\", \"Mobile\", \"Jetpack\", \"Java\")</code></li> <li>Sa\u00edda Esperada: <pre><code>Android\nJetpack\nJava\n</code></pre></li> </ul> </li> </ul>"},{"location":"PDMII/2.%20Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos%20%28POO%29/","title":"2. Programa\u00e7\u00e3o Orientada a Objetos (POO)","text":""},{"location":"PDMII/2.%20Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos%20%28POO%29/#programacao-orientada-a-objetos-poo","title":"Programa\u00e7\u00e3o Orientada a Objetos (POO)","text":"<p>POO \u00e9 um paradigma de programa\u00e7\u00e3o que organiza o c\u00f3digo em torno de objetos.</p>"},{"location":"PDMII/2.%20Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos%20%28POO%29/#classes-e-objetos","title":"Classes e Objetos","text":"<p>Uma classe \u00e9 um modelo, enquanto um objeto \u00e9 uma inst\u00e2ncia dessa classe.</p> <pre><code>// Classe\nclass Pessoa(val nome: String, var idade: Int)\n\n// Objeto (inst\u00e2ncia da classe)\nval pessoa = Pessoa(\"Jo\u00e3o\", 30)\n</code></pre>"},{"location":"PDMII/2.%20Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos%20%28POO%29/#heranca-e-polimorfismo","title":"Heran\u00e7a e Polimorfismo","text":"<ul> <li> <p>Heran\u00e7a: \u00c9 um princ\u00edpio que permite que uma classe (chamada subclasse ou classe filha) herde atributos e m\u00e9todos de outra classe (chamada superclasse ou classe pai). Isso promove a reutiliza\u00e7\u00e3o de c\u00f3digo e a organiza\u00e7\u00e3o de classes em uma hierarquia. Em Kotlin, a heran\u00e7a \u00e9 <code>final</code> por padr\u00e3o, ent\u00e3o voc\u00ea deve usar a palavra-chave <code>open</code> para permitir que uma classe ou um m\u00e9todo seja herdado.</p> <pre><code>// Superclasse / Classe pai\nopen class Animal(val nome: String) {\n    open fun emitirSom() {\n        println(\"O animal faz um som.\")\n    }\n}\n\n// Subclasse / Classe filha\nclass Cachorro(nome: String) : Animal(nome) {\n    override fun emitirSom() {\n        println(\"$nome faz au-au!\")\n    }\n}\n</code></pre> </li> <li> <p>Polimorfismo: Significa \"muitas formas\". Refere-se \u00e0 capacidade de um objeto assumir v\u00e1rias formas. Em Kotlin, o polimorfismo ocorre quando uma subclasse sobrescreve um m\u00e9todo de sua superclasse, permitindo que o mesmo m\u00e9todo se comporte de maneira diferente dependendo do objeto que o chama. Isso permite que voc\u00ea trate objetos de diferentes classes de forma uniforme.</p> <pre><code>fun main() {\n    val meuAnimal: Animal = Cachorro(\"Rex\")\n    meuAnimal.emitirSom() // Sa\u00edda: Rex faz au-au!\n}\n</code></pre> </li> </ul>"},{"location":"PDMII/2.%20Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos%20%28POO%29/#classes-avancadas-e-enumeracoes","title":"Classes Avan\u00e7adas e Enumera\u00e7\u00f5es","text":"<p>Kotlin oferece tipos de classes especiais que facilitam tarefas comuns e tornam o c\u00f3digo mais seguro.</p> <ul> <li> <p><code>data class</code>: S\u00e3o classes projetadas para apenas guardar dados. O compilador do Kotlin gera automaticamente m\u00e9todos \u00fateis como <code>equals()</code>, <code>hashCode()</code>, <code>toString()</code>, <code>copy()</code>, e <code>componentN()</code> baseados nas propriedades declaradas no construtor prim\u00e1rio. Isso elimina a necessidade de escrever c\u00f3digo repetitivo.</p> <pre><code>data class Usuario(val nome: String, val idade: Int)\n\nfun main() {\n    val usuario1 = Usuario(\"Ana\", 25)\n    println(usuario1) // Sa\u00edda: Usuario(nome=Ana, idade=25)\n    val usuario2 = usuario1.copy(idade = 26)\n}\n</code></pre> </li> <li> <p><code>sealed class</code>: S\u00e3o classes que representam hierarquias de classes restritas. Todos os subtipos de uma <code>sealed class</code> devem ser declarados dentro do mesmo arquivo, garantindo que o compilador saiba todos os poss\u00edveis subtipos. Isso \u00e9 extremamente \u00fatil em express\u00f5es <code>when</code>, onde o compilador pode garantir que todas as possibilidades foram tratadas.</p> <pre><code>sealed class Resultado\ndata class Sucesso(val dados: String) : Resultado()\ndata class Erro(val codigo: Int) : Resultado()\n\nfun processarResultado(resultado: Resultado) {\n    when (resultado) {\n        is Sucesso -&gt; println(\"Dados recebidos: ${resultado.dados}\")\n        is Erro -&gt; println(\"Erro, c\u00f3digo: ${resultado.codigo}\")\n    }\n}\n</code></pre> </li> <li> <p><code>enum class</code>: Enumeradores s\u00e3o usados para representar um conjunto de constantes fixas. Em Kotlin, as classes <code>enum</code> s\u00e3o mais poderosas do que em outras linguagens, podendo ter suas pr\u00f3prias propriedades e m\u00e9todos.</p> <pre><code>enum class DiaSemana(val sigla: String) {\n    SEGUNDA(\"Seg\"),\n    TERCA(\"Ter\"),\n    QUARTA(\"Qua\"),\n    QUINTA(\"Qui\"),\n    SEXTA(\"Sex\"),\n    SABADO(\"Sab\"),\n    DOMINGO(\"Dom\")\n}\n\nfun main() {\n    val hoje = DiaSemana.SEXTA\n    println(\"Hoje \u00e9 ${hoje.sigla}\") // Sa\u00edda: Hoje \u00e9 Sex\n}\n</code></pre> </li> </ul> <p>Atividade pr\u00e1tica 1: Desafio da Calculadora</p> <ul> <li> <p>Objetivo: Crie uma calculadora usando os princ\u00edpios de POO.</p> <ol> <li>Crie uma classe <code>Calculadora</code> com duas propriedades, <code>valor1</code> e <code>valor2</code>, para armazenar os n\u00fameros de entrada.</li> <li>Crie quatro m\u00e9todos: <code>somar()</code>, <code>subtrair()</code>, <code>multiplicar()</code> e <code>dividir()</code>. Cada fun\u00e7\u00e3o deve realizar a opera\u00e7\u00e3o e retornar o resultado.</li> <li>Crie um objeto da classe e utilize os m\u00e9todos para realizar as opera\u00e7\u00f5es.</li> </ol> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada: Instancie a classe <code>Calculadora</code> com os valores 10 e 5.</li> <li>Sa\u00edda Esperada:<ul> <li><code>soma: 15</code></li> <li><code>subtra\u00e7\u00e3o: 5</code></li> <li><code>multiplica\u00e7\u00e3o: 50</code></li> <li><code>divis\u00e3o: 2</code></li> </ul> </li> </ul> </li> </ul> <p>Atividade pr\u00e1tica 2: Heran\u00e7a e Polimorfismo</p> <ul> <li> <p>Objetivo: Crie uma classe base chamada <code>Animal</code> com a propriedade <code>nome</code> e o m\u00e9todo <code>emitirSom()</code>. Em seguida, crie duas classes filhas, <code>Cachorro</code> e <code>Gato</code>, que herdem de <code>Animal</code> e sobrescrevam o m\u00e9todo <code>emitirSom()</code> para imprimir o som espec\u00edfico de cada animal.</p> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada:<ol> <li>Crie um objeto da classe <code>Cachorro</code> com o nome \"Rex\".</li> <li>Crie um objeto da classe <code>Gato</code> com o nome \"F\u00e9lix\".</li> <li>Chame o m\u00e9todo <code>emitirSom()</code> em ambos os objetos.</li> </ol> </li> <li>Sa\u00edda Esperada:<ul> <li><code>Rex faz au-au!</code></li> <li><code>F\u00e9lix faz miau!</code></li> </ul> </li> </ul> </li> </ul> <p>Atividade pr\u00e1tica 3: Modelando um Produto</p> <ul> <li> <p>Objetivo: Crie uma classe <code>Produto</code> com as propriedades <code>nome</code> e <code>preco</code>. Em seguida, adicione um m\u00e9todo chamado <code>aplicarDesconto</code> que recebe uma porcentagem de desconto e retorna o pre\u00e7o final do produto ap\u00f3s o desconto.</p> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada: Instancie a classe <code>Produto</code> com <code>nome = \"Televisor\"</code> e <code>preco = 2000.00</code>. Chame o m\u00e9todo <code>aplicarDesconto</code> com o valor <code>10.0</code> (10%).</li> <li>Sa\u00edda Esperada: <code>1800.0</code></li> </ul> </li> </ul>"},{"location":"PDMII/3.%20Jetpack%20Compose/","title":"3. Jetpack Compose","text":""},{"location":"PDMII/3.%20Jetpack%20Compose/#jetpack-compose","title":"Jetpack Compose","text":"<p>Jetpack Compose \u00e9 o kit de ferramentas moderno e recomendado pelo Google para construir interfaces de usu\u00e1rio em Android de forma declarativa. A beleza do Compose reside na sua filosofia de componentiza\u00e7\u00e3o, onde voc\u00ea constr\u00f3i interfaces complexas a partir de blocos de constru\u00e7\u00e3o menores e reutiliz\u00e1veis. Vamos explorar como cada um desses componentes fundamentais se encaixa para criar uma tela de login funcional.</p>"},{"location":"PDMII/3.%20Jetpack%20Compose/#diferencas-entre-xml-e-jetpack-compose","title":"Diferen\u00e7as entre XML e Jetpack Compose","text":"<p>A principal mudan\u00e7a trazida pelo Jetpack Compose \u00e9 a transi\u00e7\u00e3o de uma abordagem imperativa (XML) para uma declarativa (Compose).</p> <ul> <li>Abordagem Imperativa (XML):<ul> <li>Como Funciona: Voc\u00ea constr\u00f3i a UI separadamente em arquivos XML. Para interagir com os elementos (como um bot\u00e3o ou campo de texto), voc\u00ea precisa \"encontr\u00e1-los\" no c\u00f3digo Kotlin usando <code>findViewById</code> e, em seguida, alterar suas propriedades. O processo \u00e9 manual e passo a passo.</li> <li>Exemplo:<ol> <li>Voc\u00ea cria um <code>&lt;Button&gt;</code> no arquivo <code>activity_main.xml</code>.</li> <li>No arquivo <code>MainActivity.kt</code>, voc\u00ea usa <code>val button = findViewById&lt;Button&gt;(R.id.my_button)</code>.</li> <li>Para mudar o texto, voc\u00ea faz <code>button.text = \"Novo Texto\"</code>.</li> </ol> </li> </ul> </li> <li>Abordagem Declarativa (Jetpack Compose):<ul> <li>Como Funciona: Voc\u00ea descreve como sua interface deve ser, e o Compose se encarrega de constru\u00ed-la e atualiz\u00e1-la automaticamente. A UI \u00e9 uma fun\u00e7\u00e3o do seu estado. N\u00e3o h\u00e1 necessidade de <code>findViewById</code> ou de manipular a UI manualmente.</li> <li>Exemplo:<ol> <li>Voc\u00ea cria uma fun\u00e7\u00e3o <code>@Composable</code> que descreve o bot\u00e3o e o texto dele.</li> <li>Voc\u00ea usa uma vari\u00e1vel de estado (<code>var text by remember { mutableStateOf(\"Texto Original\") }</code>).</li> <li>Para mudar o texto, voc\u00ea simplesmente atualiza a vari\u00e1vel de estado (<code>text = \"Novo Texto\"</code>), e o Compose redesenha o bot\u00e3o para voc\u00ea.</li> </ol> </li> </ul> </li> </ul> <p>Essa mudan\u00e7a simplifica drasticamente o c\u00f3digo e o torna mais intuitivo.</p>"},{"location":"PDMII/3.%20Jetpack%20Compose/#componente-de-texto-text","title":"Componente de Texto (Text)","text":"<p>O componente <code>Text</code> \u00e9 o alicerce de qualquer interface baseada em texto. Ele \u00e9 respons\u00e1vel por exibir strings na tela e oferece uma ampla gama de par\u00e2metros para personaliza\u00e7\u00e3o, como <code>fontSize</code>, <code>color</code> e <code>fontWeight</code>. Sua simplicidade \u00e9 sua maior for\u00e7a: ele se concentra em uma \u00fanica tarefa \u2014 exibir texto de forma eficiente.</p> <p>Exemplo:</p> <pre><code>import androidx.compose.material3.Text\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.sp\n\n@Composable\nfun TituloDaTela() {\n    Text(\n        text = \"Login\",\n        fontSize = 28.sp,\n        color = Color.DarkGray,\n        fontWeight = FontWeight.Bold\n    )\n}\n</code></pre>"},{"location":"PDMII/3.%20Jetpack%20Compose/#componente-de-campo-de-texto-textfield","title":"Componente de Campo de Texto (TextField)","text":"<p>O <code>TextField</code> \u00e9 o componente que permite ao usu\u00e1rio inserir dados. Diferente de abordagens imperativas, ele n\u00e3o gerencia seu pr\u00f3prio estado. Em vez disso, ele \u00e9 controlado externamente por uma vari\u00e1vel de estado. Isso garante um fluxo de dados unidirecional claro: o estado flui para o <code>TextField</code> (o que \u00e9 exibido) e os eventos do usu\u00e1rio (a digita\u00e7\u00e3o) fluem de volta para a l\u00f3gica que ir\u00e1 atualizar esse estado.</p> <ul> <li><code>value</code>: O texto que o campo exibe. \u00c9 sempre uma representa\u00e7\u00e3o do estado atual.</li> <li><code>onValueChange</code>: Uma fun\u00e7\u00e3o que \u00e9 chamada toda vez que o usu\u00e1rio altera o texto. \u00c9 aqui que voc\u00ea atualiza a vari\u00e1vel de estado.</li> </ul> <p>Exemplo:</p> <pre><code>import androidx.compose.material3.TextField\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\n\n@Composable\nfun EmailInputField() {\n    var email by remember { mutableStateOf(\"\") }\n    TextField(\n        value = email,\n        onValueChange = { novoTexto -&gt; email = novoTexto },\n        label = { Text(\"E-mail\") }\n    )\n}\n</code></pre>"},{"location":"PDMII/3.%20Jetpack%20Compose/#componente-de-botao-button","title":"Componente de Bot\u00e3o (Button)","text":"<p>O <code>Button</code> \u00e9 o componente de a\u00e7\u00e3o. Seu funcionamento \u00e9 igualmente declarativo, com um par\u00e2metro <code>onClick</code> que define a l\u00f3gica a ser executada quando o bot\u00e3o \u00e9 pressionado. O conte\u00fado dentro do bot\u00e3o pode ser qualquer outro componente, como um <code>Text</code> ou um \u00edcone.</p> <ul> <li><code>onClick</code>: Uma fun\u00e7\u00e3o lambda onde voc\u00ea define a a\u00e7\u00e3o, como autenticar um usu\u00e1rio ou enviar um formul\u00e1rio.</li> <li>Conte\u00fado: O que o bot\u00e3o exibe.</li> </ul> <p>Exemplo:</p> <pre><code>import androidx.compose.material3.Button\nimport androidx.compose.material3.Text\n\n@Composable\nfun LoginButton() {\n    Button(onClick = {\n        // L\u00f3gica de login seria executada aqui\n        println(\"Bot\u00e3o de login clicado!\")\n    }) {\n        Text(text = \"Entrar\")\n    }\n}\n</code></pre>"},{"location":"PDMII/3.%20Jetpack%20Compose/#componentes-de-layout-column-e-row","title":"Componentes de Layout: <code>Column</code> e <code>Row</code>","text":"<p>No Compose, a organiza\u00e7\u00e3o dos componentes \u00e9 feita por meio de fun\u00e7\u00f5es de layout. As mais fundamentais s\u00e3o <code>Column</code> e <code>Row</code>, que seguem a mesma l\u00f3gica das <code>Views</code> nativas, mas com a simplicidade da abordagem declarativa.</p> <ul> <li><code>Column</code>: Organiza os elementos filhos em uma disposi\u00e7\u00e3o vertical. Pense em uma coluna de itens, um abaixo do outro. \u00c9 ideal para formul\u00e1rios, listas verticais ou qualquer layout que precise empilhar componentes.</li> <li><code>Row</code>: Organiza os elementos filhos em uma disposi\u00e7\u00e3o horizontal. Pense em uma linha de itens, um ao lado do outro. \u00c9 ideal para barras de ferramentas, navega\u00e7\u00e3o ou para alinhar itens como texto e \u00edcones.</li> </ul> <p>A combina\u00e7\u00e3o desses dois componentes \u00e9 o que permite criar layouts complexos e responsivos.</p> <p>Exemplo de uso:</p> <pre><code>import androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.material3.Text\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\n\n@Composable\nfun ProfileLayout() {\n    Column(horizontalAlignment = Alignment.CenterHorizontally) {\n        // Alinha os itens da coluna ao centro horizontalmente\n        Text(text = \"Nome de usu\u00e1rio\") // Primeiro item\n        Text(text = \"Uma biografia curta\") // Segundo item\n        Row {\n            // Um Row dentro da Column, alinhando itens horizontalmente\n            Text(text = \"Seguidores: 100\")\n            Text(text = \"Seguindo: 50\")\n        }\n    }\n}\n</code></pre>"},{"location":"PDMII/3.%20Jetpack%20Compose/#gerenciamento-de-estado-e-recomposicao","title":"Gerenciamento de Estado e Recomposi\u00e7\u00e3o","text":"<p>O gerenciamento de estado \u00e9 o cora\u00e7\u00e3o do Jetpack Compose. O estado \u00e9 qualquer valor que pode mudar e afetar a interface. Para que o Compose saiba quando redesenhar a UI (um processo chamado recomposi\u00e7\u00e3o), voc\u00ea precisa usar as ferramentas certas.</p>"},{"location":"PDMII/3.%20Jetpack%20Compose/#a-dupla-imbativel-remember-e-mutablestateof","title":"A Dupla Imbat\u00edvel: <code>remember</code> e <code>mutableStateOf</code>","text":"<ul> <li><code>mutableStateOf</code>: Cria uma vari\u00e1vel que \u00e9 \"observ\u00e1vel\". Quando o valor dentro dela \u00e9 alterado, o Compose \u00e9 notificado e sabe que a UI precisa ser atualizada.</li> <li><code>remember</code>: Funciona como a \"mem\u00f3ria\" de um componente. Ele guarda o objeto criado por <code>mutableStateOf</code> e garante que ele n\u00e3o seja reinicializado toda vez que a fun\u00e7\u00e3o <code>Composable</code> for redesenhada. Sem <code>remember</code>, o valor do seu contador ou campo de texto voltaria a zero a cada mudan\u00e7a na tela, o que inviabilizaria a intera\u00e7\u00e3o.</li> <li><code>by</code>: \u00c9 um atalho de propriedade do Kotlin que torna a sintaxe mais limpa. Em vez de escrever <code>minhaVariavel.value = \"novo valor\"</code>, voc\u00ea pode simplesmente usar <code>minhaVariavel = \"novo valor\"</code>.</li> </ul>"},{"location":"PDMII/3.%20Jetpack%20Compose/#padrao-de-fluxo-de-dados-unidirecional","title":"Padr\u00e3o de Fluxo de Dados Unidirecional","text":"<p>Esse \u00e9 o princ\u00edpio fundamental do gerenciamento de estado em Compose. Ele \u00e9 composto por dois fluxos:</p> <ol> <li>Estado para baixo: O estado da sua aplica\u00e7\u00e3o (por exemplo, o texto digitado) flui do componente pai para os componentes filhos.</li> <li>Eventos para cima: As intera\u00e7\u00f5es do usu\u00e1rio (como digitar em um <code>TextField</code> ou clicar em um <code>Button</code>) geram eventos que s\u00e3o enviados para o componente pai.</li> </ol> <p>O componente pai, ao receber o evento, atualiza seu estado, que por sua vez aciona a recomposi\u00e7\u00e3o dos componentes filhos, criando um ciclo de atualiza\u00e7\u00e3o cont\u00ednua e eficiente.</p>"},{"location":"PDMII/3.%20Jetpack%20Compose/#elevacao-de-estado-state-hoisting","title":"Eleva\u00e7\u00e3o de Estado (<code>State Hoisting</code>)","text":"<p>A melhor pr\u00e1tica em Compose \u00e9 manter os componentes o mais \"burros\" poss\u00edvel. Em vez de cada componente gerenciar seu pr\u00f3prio estado, um componente pai gerencia o estado e o \"eleva\" (do ingl\u00eas, hoists). Ele passa o estado como par\u00e2metro para os filhos e tamb\u00e9m passa as fun\u00e7\u00f5es de callback (<code>onValueChange</code>, <code>onClick</code>) para que os filhos possam notificar o pai sobre as mudan\u00e7as.</p> <p>Vantagens da Eleva\u00e7\u00e3o de Estado:</p> <ul> <li>Componentes Reutiliz\u00e1veis: Os componentes filhos n\u00e3o se importam com o estado, tornando-os mais gen\u00e9ricos.</li> <li>Testabilidade: A l\u00f3gica de estado fica separada da UI.</li> <li>Menos Bugs: Evita que componentes diferentes manipulem o mesmo estado de forma inconsistente.</li> </ul>"},{"location":"PDMII/3.%20Jetpack%20Compose/#componentizacao-em-acao-a-tela-de-login","title":"Componentiza\u00e7\u00e3o em A\u00e7\u00e3o: A Tela de Login","text":"<p>Vamos combinar tudo o que aprendemos para construir uma tela de login completa, demonstrando a componentiza\u00e7\u00e3o e a eleva\u00e7\u00e3o de estado.</p> <pre><code>import androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\n\n// Componente reutiliz\u00e1vel de campo de entrada (sem estado pr\u00f3prio)\n@Composable\nfun LoginInputField(label: String, value: String, onValueChange: (String) -&gt; Unit) {\n    TextField(\n        value = value,\n        onValueChange = onValueChange,\n        label = { Text(label) }\n    )\n}\n\n// Componente reutiliz\u00e1vel de bot\u00e3o (sem estado pr\u00f3prio)\n@Composable\nfun ActionButton(text: String, onClick: () -&gt; Unit) {\n    Button(onClick = onClick) {\n        Text(text = text)\n    }\n}\n\n// O componente principal que gerencia o estado da tela\n@Composable\nfun LoginScreen() {\n    var email by remember { mutableStateOf(\"\") }\n    var password by remember { mutableStateOf(\"\") }\n\n    Column(modifier = Modifier.padding(16.dp)) {\n        Text(text = \"Bem-vindo!\", style = MaterialTheme.typography.headlineMedium)\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        LoginInputField(\n            label = \"E-mail\",\n            value = email,\n            onValueChange = { email = it } // O evento de digita\u00e7\u00e3o sobe para o pai\n        )\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        LoginInputField(\n            label = \"Senha\",\n            value = password,\n            onValueChange = { password = it } // O evento de digita\u00e7\u00e3o sobe para o pai\n        )\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        ActionButton(\n            text = \"Entrar\",\n            onClick = {\n                // Aqui a l\u00f3gica de autentica\u00e7\u00e3o \u00e9 executada\n                println(\"Autenticando com e-mail: $email e senha: $password\")\n            }\n        )\n    }\n}\n</code></pre>"},{"location":"PDMII/3.%20Jetpack%20Compose/#atividades-de-fixacao","title":"Atividades de Fixa\u00e7\u00e3o","text":"<p>Agora, vamos colocar a m\u00e3o na massa para solidificar os conceitos. As atividades a seguir combinam o uso de <code>Text</code>, <code>TextField</code>, <code>Button</code>, <code>Column</code>, <code>Row</code> e estado.</p>"},{"location":"PDMII/3.%20Jetpack%20Compose/#atividade-pratica-1-criando-um-contador-interativo","title":"Atividade pr\u00e1tica 1: Criando um Contador Interativo","text":"<ul> <li> <p>Objetivo: Construa um contador interativo para entender o funcionamento do estado e da recomposi\u00e7\u00e3o.</p> <ol> <li>No seu projeto, localize o arquivo <code>MainActivity.kt</code>.</li> <li>Dentro da fun\u00e7\u00e3o principal <code>@Composable</code>, adicione um <code>Column</code>.</li> <li>Dentro do <code>Column</code>, crie uma vari\u00e1vel de estado para o contador usando <code>remember { mutableStateOf(0) }</code>.</li> <li>Adicione um <code>Text</code> que exiba o valor atual do contador.</li> <li>Adicione um <code>Button</code> abaixo do <code>Text</code>.</li> <li>No <code>onClick</code> do <code>Button</code>, incremente o valor do contador.</li> <li>Execute o aplicativo e veja a interface ser atualizada automaticamente a cada clique no bot\u00e3o.</li> </ol> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada: Clicar no bot\u00e3o 3 vezes.</li> <li>Sa\u00edda Esperada: O texto exibido na tela do contador deve mudar de \"Valor: 0\" para \"Valor: 3\".</li> </ul> </li> </ul>"},{"location":"PDMII/3.%20Jetpack%20Compose/#atividade-pratica-2-criando-uma-lista-de-tarefas-to-do-list","title":"Atividade pr\u00e1tica 2: Criando uma Lista de Tarefas (To-Do List)","text":"<ul> <li> <p>Objetivo: Crie uma lista de tarefas simples para entender como gerenciar o estado de uma cole\u00e7\u00e3o de itens.</p> <ol> <li>Crie uma vari\u00e1vel de estado para armazenar uma lista de strings, por exemplo, <code>var tasks by remember { mutableStateOf(listOf&lt;String&gt;()) }</code>.</li> <li>Adicione um <code>TextField</code> para o usu\u00e1rio digitar uma nova tarefa. Use outra vari\u00e1vel de estado para o texto do campo.</li> <li>Adicione um <code>Button</code> com o texto \"Adicionar\". No <code>onClick</code>, adicione o texto do <code>TextField</code> \u00e0 lista de tarefas e limpe o campo.</li> <li>Use um <code>Column</code> para exibir a lista de tarefas, usando um loop (por exemplo, <code>tasks.forEach { task -&gt; Text(text = task) }</code>) para exibir cada item.</li> </ol> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada: Digite \"Comprar leite\" e clique em \"Adicionar\". Em seguida, digite \"Estudar Kotlin\" e clique em \"Adicionar\".</li> <li>Sa\u00edda Esperada: A tela deve exibir os dois textos, um abaixo do outro: \"Comprar leite\" e \"Estudar Kotlin\".</li> </ul> </li> </ul>"},{"location":"PDMII/3.%20Jetpack%20Compose/#atividade-pratica-3-calculadora-de-gasto-de-combustivel","title":"Atividade pr\u00e1tica 3: Calculadora de Gasto de Combust\u00edvel","text":"<ul> <li> <p>Objetivo: Crie uma tela para calcular o gasto de combust\u00edvel. A UI deve ter campos para o usu\u00e1rio inserir o valor e o tipo de combust\u00edvel, e um bot\u00e3o que realiza o c\u00e1lculo e exibe o resultado.</p> <ol> <li>Crie uma vari\u00e1vel de estado para o valor do combust\u00edvel e outra para o tipo.</li> <li>Use <code>TextField</code> para cada uma das entradas.</li> <li>Adicione um <code>Button</code> para disparar a fun\u00e7\u00e3o de c\u00e1lculo.</li> <li>Exiba o resultado do c\u00e1lculo em um <code>Text</code>.</li> </ol> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada: Valor do combust\u00edvel: 5.50 (Gasolina), 4.20 (Etanol). Digite \"5.50\" no campo de valor e \"Gasolina\" no campo de tipo.</li> <li>Sa\u00edda Esperada: Ao clicar no bot\u00e3o, a tela deve exibir o resultado do c\u00e1lculo, por exemplo: \"O gasto total \u00e9 de R$ [valor_calculado]\".</li> </ul> </li> </ul>"},{"location":"PDMII/3.%20Jetpack%20Compose/#atividade-pratica-4-calculadora-de-imposto-de-renda","title":"Atividade pr\u00e1tica 4: Calculadora de Imposto de Renda","text":"<ul> <li> <p>Objetivo: Crie uma tela para calcular o Imposto de Renda (IR) de um valor de sal\u00e1rio mensal.</p> <ul> <li>Use um <code>TextField</code> para o usu\u00e1rio inserir o valor do sal\u00e1rio.</li> <li>Use o estado para armazenar o valor do sal\u00e1rio.</li> <li>Adicione um <code>Button</code> para disparar a fun\u00e7\u00e3o de c\u00e1lculo.</li> <li>Exiba o resultado em um <code>Text</code>.</li> </ul> </li> <li> <p>Tabela de al\u00edquotas (simplificada para o exerc\u00edcio):</p> <ul> <li>At\u00e9 R$ 2.000,00: Isento</li> <li>De R$ 2.000,01 a R$ 3.000,00: 7.5%</li> <li>De R$ 3.000,01 a R$ 4.500,00: 15%</li> <li>Acima de R$ 4.500,00: 22.5%</li> </ul> </li> <li> <p>Teste de Mesa:</p> <ul> <li>Entrada: Digite \"3500\" no campo de sal\u00e1rio.</li> <li>Sa\u00edda Esperada: O texto de resultado deve exibir \"Imposto de Renda: R$ 525.00\" (pois 3500 * 15% = 525).</li> </ul> </li> </ul>"},{"location":"PDMII/Gerenciamento%20de%20Estado/state/","title":"Explica\u00e7\u00e3o do C\u00f3digo CounterScreen em Jetpack Compose","text":"<p>Este c\u00f3digo demonstra tr\u00eas padr\u00f5es diferentes de gerenciamento de estado no Jetpack Compose, um framework moderno para constru\u00e7\u00e3o de UIs no Android.</p>"},{"location":"PDMII/Gerenciamento%20de%20Estado/state/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O c\u00f3digo cria uma tela simples com tr\u00eas bot\u00f5es que funcionam como contadores, cada um ilustrando uma abordagem diferente para lidar com estado:</p> <ol> <li>Estado b\u00e1sico com <code>remember</code></li> <li>Estado persistente com <code>rememberSaveable</code></li> <li>Eleva\u00e7\u00e3o de estado (State Hoisting)</li> </ol>"},{"location":"PDMII/Gerenciamento%20de%20Estado/state/#estrutura-principal","title":"Estrutura Principal","text":"<pre><code>@Composable\nfun CounterScreen() {\n    Column(\n        Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        // Implementa\u00e7\u00f5es dos contadores aqui\n    }\n}\n</code></pre> <ul> <li>Column: Organiza os elementos verticalmente</li> <li>Modifier.fillMaxSize(): Ocupa toda a tela dispon\u00edvel</li> <li>padding(16.dp): Adiciona espa\u00e7amento interno</li> <li>Arrangement.Center e Alignment.CenterHorizontally: Centraliza os elementos</li> </ul>"},{"location":"PDMII/Gerenciamento%20de%20Estado/state/#1-estado-basico-com-remember","title":"1. Estado B\u00e1sico com <code>remember</code>","text":"<p><pre><code>val count = remember { mutableIntStateOf(0) }\nButton(onClick = { count.intValue++ }) {\n    Text(\"Count: ${count.intValue}\")\n}\n</code></pre> - <code>remember</code>: Mant\u00e9m o estado durante recomposi\u00e7\u00f5es, mas \u00e9 destru\u00eddo quando a tela \u00e9 removida - <code>mutableIntStateOf(0)</code>: Cria um estado mut\u00e1vel inicializado com 0 - O bot\u00e3o incrementa o valor e exibe o contador atual</p>"},{"location":"PDMII/Gerenciamento%20de%20Estado/state/#2-estado-persistente-com-remembersaveable","title":"2.  Estado Persistente com rememberSaveable","text":"<p>kotlin Copy val countSaveable = rememberSaveable { mutableIntStateOf(0) } Button(onClick = { countSaveable.intValue++ }) {     Text(\"Count: ${countSaveable.intValue}\") } rememberSaveable: Similar ao remember, mas sobrevive a mudan\u00e7as de configura\u00e7\u00e3o (como rota\u00e7\u00e3o de tela)</p> <p>Ideal para manter estado entre recrea\u00e7\u00f5es de atividade</p> <ol> <li>Eleva\u00e7\u00e3o de Estado (State Hoisting) kotlin Copy var countLifting by rememberSaveable { mutableIntStateOf(0) } Counter(countLifting, onIncrement = { countLifting++ }) kotlin Copy @Composable fun Counter(count: Int, onIncrement: () -&gt; Unit) {     Button(onClick = onIncrement) {         Text(\"Count: $count\")     } } State Hoisting: Padr\u00e3o onde o estado \u00e9 movido para o componente pai</li> </ol> <p>Counter \u00e9 um componente stateless (sem estado pr\u00f3prio)</p> <p>Recebe o valor atual e uma lambda para notificar incrementos</p> <p>Vantagens:</p> <p>Reutiliza\u00e7\u00e3o do componente</p> <p>Estado controlado pelo pai</p> <p>F\u00e1cil teste isolado</p> <p>Conceitos Importantes Estado em Compose: Dados que podem mudar e afetam a UI</p> <p>Recomposi\u00e7\u00e3o: Processo de redesenhar a UI quando o estado muda</p> <p>State Hoisting: Padr\u00e3o recomendado para componentes reutiliz\u00e1veis</p> <p>Quando Usar Cada Abordagem remember: Estado tempor\u00e1rio que n\u00e3o precisa persistir</p> <p>rememberSaveable: Estado que deve sobreviver a mudan\u00e7as de configura\u00e7\u00e3o</p> <p>State Hoisting: Para componentes reutiliz\u00e1veis ou quando o estado precisa ser compartilhado</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/","title":"Revis\u00e3o Pr\u00e1tica: PDMII e LDDM","text":""},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/#repo","title":"Repo","text":"<pre><code>https://github.com/fatec-registro-yuri-villanova/bovino\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<p>Imagine a seguinte estrutura de arquivos Kotlin em um projeto Android Studio:</p> <pre><code>app/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/\n\u2502               \u2514\u2500\u2500 example/\n\u2502                   \u2514\u2500\u2500 bovinehealthmanager/\n\u2502                       \u251c\u2500\u2500 MainActivity.kt\n\u2502                       \u251c\u2500\u2500 ui/\n\u2502                       \u2502   \u251c\u2500\u2500 theme/\n\u2502                       \u2502   \u2502   \u251c\u2500\u2500 Theme.kt\n\u2502                       \u2502   \u2502   \u2514\u2500\u2500 Color.kt\n\u2502                       \u2502   \u251c\u2500\u2500 screens/\n\u2502                       \u2502   \u2502   \u251c\u2500\u2500 BovineListScreen.kt\n\u2502                       \u2502   \u2502   \u2514\u2500\u2500 BovineDetailScreen.kt\n\u2502                       \u2502   \u2514\u2500\u2500 components/\n\u2502                       \u2502       \u2514\u2500\u2500 BovineCard.kt\n\u2502                       \u2514\u2500\u2500 data/\n\u2502                           \u2514\u2500\u2500 Bovine.kt\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/#conceitos-aplicados","title":"Conceitos Aplicados","text":""},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/#1-mainactivitykt-ponto-de-entrada-e-navegacao","title":"1. MainActivity.kt - Ponto de Entrada e Navega\u00e7\u00e3o","text":"<p>Este arquivo conteria a Activity principal e configuraria o NavController e o NavHost para gerenciar a navega\u00e7\u00e3o entre as telas.</p> <pre><code>// MainActivity.kt\npackage com.fatec.bovino\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.fatec.bovino.ui.screens.BovineDetailScreen\nimport com.fatec.bovino.ui.screens.BovineListScreen\nimport com.fatec.bovino.ui.theme.BovinoTheme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            BovinoTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    BovineAppNavigation() // Componente de navega\u00e7\u00e3o\n                }\n\n            }\n        }\n    }\n}\n\n@Composable\nfun BovineAppNavigation() {\n    val navController = rememberNavController() // O NavController lembra o estado da navega\u00e7\u00e3o\n\n    NavHost(navController = navController, startDestination = \"bovine_list\") {\n        // Define a rota para a tela de listagem de bovinos\n        composable(\"bovine_list\") {\n            BovineListScreen(\n                onNavigateToDetail = { bovineId -&gt;\n                    navController.navigate(\"bovine_detail/$bovineId\") // Navega para detalhes\n                }\n            )\n        }\n        // Define a rota para a tela de detalhes do bovino, com um argumento\n        composable(\"bovine_detail/{bovineId}\") { backStackEntry -&gt;\n            val bovineId = backStackEntry.arguments?.getString(\"bovineId\")\n            BovineDetailScreen(bovineId = bovineId) // Passa o ID para a tela de detalhes\n        }\n    }\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/#2-bovinekt-modelo-de-dados","title":"2. Bovine.kt - Modelo de Dados","text":"<p>Define a estrutura de dados para um bovino.</p> <pre><code>// data/Bovine.kt\npackage com.fatec.bovino.data\n\ndata class Bovine(\n    val id: String,\n    var name: String,\n    var breed: String,\n    var healthStatus: HealthStatus,\n    var lastVaccinationDate: String\n)\n\nenum class HealthStatus {\n    SAUDAVEL, // SAUD\u00c1VEL\n    RISCO, // EM RISCO\n    VACINACAO_PENDENTE // VACINA\u00c7\u00c3O PENDENTE\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/#3-bovinelistscreenkt-tela-de-listagem-de-bovinos","title":"3. BovineListScreen.kt - Tela de Listagem de Bovinos","text":"<p>Esta tela demonstra o gerenciamento de estado (lista de bovinos), Column para organiza\u00e7\u00e3o vertical, Row e Text dentro do BovineCard, e Modifier.</p> <pre><code>// ui/screens/BovineListScreen.kt\npackage com.fatec.bovino.ui.screens\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.* // Importa remember e mutableStateOf\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport com.fatec.bovino.data.Bovine\nimport com.fatec.bovino.data.HealthStatus\nimport com.fatec.bovino.ui.components.BovineCard\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BovineListScreen(onNavigateToDetail: (String) -&gt; Unit) {\n    // Gerenciamento de estado para a lista de bovinos\n    // Usando 'remember' para manter a lista entre recomposi\u00e7\u00f5es\n    // Usando 'mutableStateOf' para tornar a lista observ\u00e1vel\n    // O 'by' permite acesso direto ao valor da lista sem .value\n    var bovines by remember {\n        mutableStateOf(\n            listOf(\n                Bovine(\"001\", \"Mimosa\", \"Jersey\", HealthStatus.SAUDAVEL, \"2024-05-01\"),\n                Bovine(\"002\", \"Estrela\", \"Holandesa\", HealthStatus.VACINACAO_PENDENTE, \"2023-11-15\"),\n                Bovine(\"003\", \"Fofinha\", \"Nelore\", HealthStatus.RISCO, \"2024-03-20\"),\n                Bovine(\"004\", \"Pintada\", \"Angus\", HealthStatus.SAUDAVEL, \"2024-04-10\")\n            )\n        )\n    }\n\n    // Estado para determinar se h\u00e1 algum alerta geral (para Top App Bar)\n    val hasAlert by remember {\n        derivedStateOf {\n            bovines.any { it.healthStatus == HealthStatus.RISCO || it.healthStatus == HealthStatus.VACINACAO_PENDENTE }\n        }\n    }\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"Gerenciador de Bovinos\") },\n                // A cor da Top App Bar muda dinamicamente com base no estado 'hasAlert'\n                colors = TopAppBarDefaults.topAppBarColors(\n                    containerColor = if (hasAlert) Color(0xFFEF5350) else MaterialTheme.colorScheme.primary // Vermelho para alerta\n                )\n            )\n        }\n    ) { paddingValues -&gt;\n        // LazyColumn \u00e9 eficiente para listas longas, renderizando apenas os itens vis\u00edveis\n        LazyColumn(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(paddingValues) // Aplica o padding da Scaffold\n                .padding(horizontal = 16.dp, vertical = 8.dp) // Modificador para padding externo\n        ) {\n            items(bovines) { bovine -&gt;\n                // BovineCard \u00e9 um Composable reutiliz\u00e1vel\n                BovineCard(bovine = bovine, onClick = { onNavigateToDetail(bovine.id) })\n                Spacer(modifier = Modifier.height(8.dp)) // Espa\u00e7amento entre os cards\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/#4-bovinecardkt-componente-reutilizavel-state-hoisting","title":"4. BovineCard.kt - Componente Reutiliz\u00e1vel (State Hoisting)","text":"<p>Este componente demonstra Column, Row, Text, Modifier e o conceito de State Hoisting, onde o estado (o objeto Bovine) \u00e9 passado de cima para baixo.</p> <pre><code>// ui/components/BovineCard.kt\npackage com.fatec.bovino.ui.components\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport com.fatec.bovino.data.Bovine\nimport com.fatec.bovino.data.HealthStatus\n\n@Composable\nfun BovineCard(bovine: Bovine, onClick: () -&gt; Unit) {\n    // Determina a cor de fundo do card com base no status de sa\u00fade\n    val cardBackgroundColor = when (bovine.healthStatus) {\n        HealthStatus.SAUDAVEL -&gt; Color(0xFFE8F5E9) // Verde claro\n        HealthStatus.RISCO -&gt; Color(0xFFFFCC80) // Laranja claro\n        HealthStatus.VACINACAO_PENDENTE -&gt; Color(0xFFFFCDD2) // Vermelho claro\n    }\n\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .clickable(onClick = onClick), // Torna o card clic\u00e1vel\n        shape = RoundedCornerShape(8.dp), // Cantos arredondados\n        colors = CardDefaults.cardColors(containerColor = cardBackgroundColor), // Cor de fundo do card\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp) // Sombra\n    ) {\n        // Column para organizar as informa\u00e7\u00f5es verticalmente\n        Column(\n            modifier = Modifier.padding(16.dp) // Padding interno\n        ) {\n            // Row para alinhar ID e Status horizontalmente\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween, // Espa\u00e7amento entre os elementos\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\n                    text = \"ID: ${bovine.id}\",\n                    style = MaterialTheme.typography.titleMedium // Estilo de texto do Material Theme\n                )\n                // Box para \"encaixotar\" o status com um fundo colorido\n                Box(\n                    modifier = Modifier\n                        .background(\n                            color = when (bovine.healthStatus) {\n                                HealthStatus.SAUDAVEL -&gt; Color.Green.copy(alpha = 0.7f)\n                                HealthStatus.RISCO -&gt; Color.Yellow .copy(alpha = 0.7f)\n                                HealthStatus.VACINACAO_PENDENTE -&gt; Color.Red.copy(alpha = 0.7f)\n                            },\n                            shape = RoundedCornerShape(4.dp) // Cantos arredondados para o Box\n                        )\n                        .padding(horizontal = 6.dp, vertical = 2.dp) // Padding interno do Box\n                ) {\n                    Text(\n                        text = bovine.healthStatus.name.replace(\"_\", \" \"),\n                        color = Color.White,\n                        style = MaterialTheme.typography.labelSmall\n                    )\n                }\n            }\n            Spacer(modifier = Modifier.height(4.dp)) // Espa\u00e7amento vertical\n            Text(\n                text = \"Nome: ${bovine.name}\",\n                style = MaterialTheme.typography.bodyMedium\n            )\n            Text(\n                text = \"Ra\u00e7a: ${bovine.breed}\",\n                style = MaterialTheme.typography.bodySmall\n            )\n            Text(\n                text = \"\u00daltima Vacina\u00e7\u00e3o: ${bovine.lastVaccinationDate}\",\n                style = MaterialTheme.typography.bodySmall\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/#5-bovinedetailscreenkt-tela-de-detalhes-do-bovino","title":"5. BovineDetailScreen.kt - Tela de Detalhes do Bovino","text":"<p>Esta tela demonstra como receber argumentos de navega\u00e7\u00e3o e pode incluir mais gerenciamento de estado local.</p> <pre><code>// ui/screens/BovineDetailScreen.kt\npackage com.fatec.bovino.ui.screens\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport com.fatec.bovino.data.Bovine\nimport com.fatec.bovino.data.HealthStatus\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BovineDetailScreen(bovineId: String?) {\n    // Simula a busca do bovino por ID (em um app real, viria de um ViewModel/reposit\u00f3rio)\n    val bovine = remember(bovineId) { // remember o objeto Bovine baseado no ID\n        // Exemplo de dados mockados\n        when (bovineId) {\n            \"001\" -&gt; Bovine(\"001\", \"Mimosa\", \"Jersey\", HealthStatus.SAUDAVEL, \"2024-05-01\")\n            \"002\" -&gt; Bovine(\"002\", \"Estrela\", \"Holandesa\", HealthStatus.VACINACAO_PENDENTE, \"2023-11-15\")\n            \"003\" -&gt; Bovine(\"003\", \"Fofinha\", \"Nelore\", HealthStatus.RISCO, \"2024-03-20\")\n            \"004\" -&gt; Bovine(\"004\", \"Pintada\", \"Angus\", HealthStatus.SAUDAVEL, \"2024-04-10\")\n            else -&gt; null\n        }\n    }\n\n    // Estado local para o status de sa\u00fade, permitindo altera\u00e7\u00e3o na tela de detalhes\n    // Demonstra o uso de 'by' e 'remember' para estado mut\u00e1vel\n    var currentHealthStatus by remember { mutableStateOf(bovine?.healthStatus ?: HealthStatus.SAUDAVEL) }\n\n    Scaffold(\n        topBar = {\n            TopAppBar(title = { Text(\"Detalhes do Bovino: $bovineId\") })\n        }\n    ) { paddingValues -&gt;\n        if (bovine != null) {\n            Column(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(paddingValues)\n                    .padding(16.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.Center\n            ) {\n                Text(text = \"ID: ${bovine.id}\", style = MaterialTheme.typography.headlineMedium)\n                Spacer(modifier = Modifier.height(8.dp))\n                Text(text = \"Nome: ${bovine.name}\", style = MaterialTheme.typography.titleLarge)\n                Text(text = \"Ra\u00e7a: ${bovine.breed}\", style = MaterialTheme.typography.titleMedium)\n                Text(text = \"\u00daltima Vacina\u00e7\u00e3o: ${bovine.lastVaccinationDate}\", style = MaterialTheme.typography.bodyLarge)\n                Spacer(modifier = Modifier.height(16.dp))\n\n                // Exibe o status atual com base no estado local\n                Text(text = \"Status de Sa\u00fade: ${currentHealthStatus.name.replace(\"_\", \" \")}\",\n                    style = MaterialTheme.typography.titleMedium,\n                    color = when (currentHealthStatus) {\n                        HealthStatus.SAUDAVEL -&gt; Color.Green\n                        HealthStatus.RISCO -&gt; Color.Yellow\n                        HealthStatus.VACINACAO_PENDENTE -&gt; Color.Red\n                    }\n                )\n                Spacer(modifier = Modifier.height(16.dp))\n\n                // Bot\u00f5es para mudar o status (demonstra\u00e7\u00e3o de gerenciamento de estado)\n                Row(\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\n                ) {\n                    Button(onClick = { currentHealthStatus = HealthStatus.SAUDAVEL }) {\n                        Text(\"Saud\u00e1vel\")\n                    }\n                    Button(onClick = { currentHealthStatus = HealthStatus.RISCO }) {\n                        Text(\"Em Risco\")\n                    }\n                    Button(onClick = { currentHealthStatus = HealthStatus.VACINACAO_PENDENTE }) {\n                        Text(\"Vacinar\")\n                    }\n                }\n            }\n        } else {\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(\"Bovino n\u00e3o encontrado.\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o%20Pr%C3%A1tica/#6-themekt-e-colorkt-tematizacao-do-material-design","title":"6. Theme.kt e Color.kt - Tematiza\u00e7\u00e3o do Material Design","text":"<p>Estes arquivos definiriam as cores e a tipografia para o MaterialTheme da aplica\u00e7\u00e3o.</p> <pre><code>// ui/theme/Theme.kt\npackage com.fatec.bovino.ui.theme\n\nimport android.os.Build\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.darkColorScheme\nimport androidx.compose.material3.dynamicDarkColorScheme\nimport androidx.compose.material3.dynamicLightColorScheme\nimport androidx.compose.material3.lightColorScheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalContext\n\nprivate val DarkColorScheme = darkColorScheme(\n    primary = Purple80,\n    secondary = PurpleGrey80,\n    tertiary = Pink80,\n    background = Color(0xFF1C1B1F),\n    surface = Color(0xFF1C1B1F),\n    onPrimary = Color.White,\n    onSecondary = Color.White,\n    onTertiary = Color.White,\n    onBackground = Color(0xFFE6E1E5),\n    onSurface = Color(0xFFE6E1E5),\n)\n\nprivate val LightColorScheme = lightColorScheme(\n    primary = Purple40,\n    secondary = PurpleGrey40,\n    tertiary = Pink40,\n    background = Color(0xFFFFFBFE),\n    surface = Color(0xFFFFFBFE),\n    onPrimary = Color.White,\n    onSecondary = Color.White,\n    onTertiary = Color.White,\n    onBackground = Color(0xFF1C1B1F),\n    onSurface = Color(0xFF1C1B1F),\n)\n\n@Composable\nfun BovinoTheme(\n    darkTheme: Boolean = isSystemInDarkTheme(),\n    // Dynamic color is available on Android 12+\n    dynamicColor: Boolean = true,\n    content: @Composable () -&gt; Unit\n) {\n    val colorScheme = when {\n        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {\n            val context = LocalContext.current\n            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)\n        }\n\n        darkTheme -&gt; DarkColorScheme\n        else -&gt; LightColorScheme\n    }\n\n    MaterialTheme(\n        colorScheme = colorScheme,\n        typography = Typography,\n        content = content\n    )\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/","title":"Revis\u00e3o Conceitual: PDMII e LDDM","text":""},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#1-introducao-ao-jetpack-compose","title":"1. Introdu\u00e7\u00e3o ao Jetpack Compose","text":"<p>O Jetpack Compose \u00e9 um toolkit moderno para construir interfaces de usu\u00e1rio nativas no Android. Ele adota uma abordagem declarativa, o que significa que voc\u00ea descreve como sua UI deve ser em diferentes estados, e o Compose se encarrega de atualizar a UI quando o estado muda.</p> <p>Linguagem de Programa\u00e7\u00e3o: A linguagem mais utilizada e recomendada para desenvolver aplicativos Android com Jetpack Compose \u00e9 o Kotlin. O Kotlin oferece recursos que se alinham perfeitamente com a natureza declarativa do Compose, como fun\u00e7\u00f5es de extens\u00e3o, lambdas e delega\u00e7\u00e3o de propriedades.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#2-gerenciamento-de-estado-no-jetpack-compose","title":"2. Gerenciamento de Estado no Jetpack Compose","text":"<p>O gerenciamento de estado \u00e9 um dos pilares do Jetpack Compose, garantindo que a interface do usu\u00e1rio seja reativa e se atualize automaticamente quando os dados subjacentes mudam.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#o-que-e-estado","title":"O que \u00e9 \"Estado\"?","text":"<p>Em uma aplica\u00e7\u00e3o, \"estado\" refere-se a qualquer valor que pode mudar ao longo do tempo e que afeta a interface do usu\u00e1rio. Exemplos incluem o texto digitado em um campo, a visibilidade de um elemento, a cor de um componente ou uma lista de itens.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#remember-e-mutablestateof","title":"remember e mutableStateOf","text":"<p>No Jetpack Compose, o principal mecanismo fundamental para gerenciar o estado de forma reativa \u00e9 a combina\u00e7\u00e3o de <code>remember</code> e <code>mutableStateOf</code>.</p> <p>mutableStateOf: Cria um objeto observ\u00e1vel que cont\u00e9m um valor. Quando o valor dentro de um MutableState muda, o Compose \u00e9 notificado e recomp\u00f5e (redesenha) os Composables que leem esse estado.</p> <pre><code>val count = mutableStateOf(0)\n</code></pre> <p>remember: \u00c9 uma fun\u00e7\u00e3o Composable que armazena um objeto na mem\u00f3ria durante a recomposi\u00e7\u00e3o. Sem <code>remember</code>, o estado seria redefinido para seu valor inicial a cada recomposi\u00e7\u00e3o. Ele \"lembra\" o valor entre as recomposi\u00e7\u00f5es da fun\u00e7\u00e3o Composable.</p> <pre><code>val count = remember { mutableStateOf(0) }\n</code></pre> <p>Isso garante que, mesmo que a fun\u00e7\u00e3o Composable seja chamada novamente, o valor de <code>count</code> persistir\u00e1.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#uso-do-by-com-remember-delegacao-de-propriedades","title":"Uso do by com remember (Delega\u00e7\u00e3o de Propriedades)","text":"<p>O Kotlin oferece um recurso chamado delega\u00e7\u00e3o de propriedades que simplifica a sintaxe ao usar <code>mutableStateOf</code> com <code>remember</code>. O operador <code>by</code> permite que voc\u00ea acesse diretamente o valor do MutableState sem precisar usar <code>.value</code>.</p> <p>Compare:</p> <p>Sem <code>by</code>: <pre><code>val countState = remember { mutableStateOf(0) }\nText(text = \"Contagem: ${countState.value}\")\nButton(onClick = { countState.value++ }) {\n    Text(\"Incrementar\")\n}\n</code></pre></p> <p>Com <code>by</code>: <pre><code>var count by remember { mutableStateOf(0) } // 'var' \u00e9 necess\u00e1rio aqui\nText(text = \"Contagem: $count\")\nButton(onClick = { count++ }) {\n    Text(\"Incrementar\")\n}\n</code></pre></p> <p>A sintaxe <code>by</code> torna o c\u00f3digo mais conciso e leg\u00edvel, permitindo que voc\u00ea trate <code>count</code> como uma vari\u00e1vel comum, enquanto por baixo dos panos, ela ainda \u00e9 um MutableState.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#state-hoisting-elevacao-de-estado","title":"State Hoisting (Eleva\u00e7\u00e3o de Estado)","text":"<p>State Hoisting \u00e9 um padr\u00e3o no Jetpack Compose onde o estado \u00e9 movido para cima na hierarquia de Composables, para um ancestral comum que pode gerenciar e observar esse estado. Isso torna os Composables mais reutiliz\u00e1veis, test\u00e1veis e menos acoplados ao estado.</p> <p>Benef\u00edcios:</p> <ul> <li>Unidirecionalidade do fluxo de dados: O estado flui para baixo (do pai para o filho) e os eventos fluem para cima (do filho para o pai).</li> <li>Reutiliza\u00e7\u00e3o: Composables filhos se tornam \"stateless\" (sem estado pr\u00f3prio), facilitando a reutiliza\u00e7\u00e3o em diferentes contextos.</li> <li>Testabilidade: Componentes sem estado s\u00e3o mais f\u00e1ceis de testar.</li> <li>Separa\u00e7\u00e3o de preocupa\u00e7\u00f5es: Onde o estado \u00e9 definido e modificado \u00e9 separado de onde ele \u00e9 usado na UI.</li> </ul> <p>Exemplo: Em vez de um <code>CattleCardComponent</code> gerenciar seu pr\u00f3prio estado de \"sa\u00fade\", o estado de sa\u00fade seria elevado para uma tela ou ViewModel que gerencia a lista de bovinos, e o <code>CattleCardComponent</code> receberia o estado como um par\u00e2metro.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#tipos-de-gerenciamento-de-estado","title":"Tipos de Gerenciamento de Estado","text":"<p>O gerenciamento de estado pode ser categorizado de v\u00e1rias formas:</p> <ul> <li> <p>Estado Interno do Composable (remember / mutableStateOf): Para estados que s\u00e3o relevantes apenas para um Composable espec\u00edfico e n\u00e3o precisam ser compartilhados ou observados por outros. Este estado \u00e9 perdido em caso de recria\u00e7\u00e3o da Activity.</p> </li> <li> <p>Estado Interno Persistente do Composable (rememberSaveable / mutableStateOf): Para estados que s\u00e3o relevantes para um Composable espec\u00edfico e precisam sobreviver \u00e0 recria\u00e7\u00e3o da Activity (ex., rota\u00e7\u00e3o de tela).</p> </li> <li> <p>Estado Elevado (State Hoisting): Quando o estado \u00e9 movido para um Composable ancestral ou um ViewModel para ser compartilhado e gerenciado centralmente.</p> </li> <li> <p>Estado Compartilhado (Shared State): Quando m\u00faltiplos Composables precisam acessar e/ou modificar o mesmo peda\u00e7o de estado. Isso \u00e9 geralmente alcan\u00e7ado atrav\u00e9s de State Hoisting para um ViewModel ou um Composable pai.</p> </li> </ul>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#3-composables-de-layout-e-modifiers","title":"3. Composables de Layout e Modifiers","text":"<p>O Jetpack Compose oferece uma s\u00e9rie de Composables para organizar elementos na tela e Modifiers para personalizar sua apar\u00eancia e comportamento.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#text","title":"Text","text":"<p>O Composable mais adequado para exibir dados textuais simples, como o nome de um animal ou um pre\u00e7o.</p> <pre><code>Text(text = \"Nome do Animal: Bovino 123\")\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#row","title":"Row","text":"<p>Usado para organizar elementos horizontalmente, um ao lado do outro.</p> <pre><code>Row {\n    Text(\"Brinco: 001\")\n    Text(\"Data Nasc.: 01/01/2023\")\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#column","title":"Column","text":"<p>Usado para organizar elementos verticalmente, um abaixo do outro. Ideal para listas de informa\u00e7\u00f5es ou para o <code>CattleCardComponent</code>.</p> <pre><code>Column {\n    Text(\"ID: 456\")\n    Text(\"Ra\u00e7a: Nelore\")\n    Text(\"Status: Saud\u00e1vel\")\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#box","title":"Box","text":"<p>Permite empilhar elementos um sobre o outro (como frames em uma caixa) ou usar um Composable como plano de fundo para outro. \u00c9 \u00fatil para criar efeitos de cont\u00eainer com fundos personalizados.</p> <pre><code>Box(\n    modifier = Modifier\n        .background(Color.Red)\n        .padding(8.dp)\n) {\n    Text(\"ATEN\u00c7\u00c3O!\", color = Color.White)\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#modifier","title":"Modifier","text":"<p>Uma classe essencial no Compose que permite encadear diversas propriedades visuais e de layout em um Composable. Ele n\u00e3o \u00e9 um Composable em si, mas um objeto que voc\u00ea passa para os Composables para modific\u00e1-los.</p> <pre><code>Text(\n    text = \"Meu Texto\",\n    modifier = Modifier\n        .padding(16.dp) // Espa\u00e7amento interno\n        .background(Color.Blue) // Cor de fundo\n        .fillMaxWidth() // Ocupa a largura m\u00e1xima\n)\n</code></pre> <p><code>Modifier</code> \u00e9 a classe principal que prov\u00ea a funcionalidade para definir atributos visuais como margens (<code>padding</code>), preenchimento (<code>padding</code>), cor de fundo (<code>background</code>), tamanho (<code>size</code>), etc.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#4-temas-e-material-design","title":"4. Temas e Material Design","text":"<p>O Jetpack Compose, em conjunto com o Material Design, oferece ferramentas poderosas para garantir consist\u00eancia visual e ader\u00eancia \u00e0s diretrizes de design modernas.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#materialtheme","title":"MaterialTheme","text":"<p>\u00c9 o recurso do Jetpack Compose amplamente utilizado que abrange um conjunto de componentes e diretrizes para construir interfaces coesas. Ele define a tipografia, cores e formas que ser\u00e3o usadas em toda a aplica\u00e7\u00e3o, garantindo uma apar\u00eancia unificada.</p> <pre><code>@Composable\nfun MyAppTheme(content: @Composable () -&gt; Unit) {\n    MaterialTheme(\n        colors = MyColors, // Cores personalizadas\n        typography = MyTypography, // Tipografia personalizada\n        shapes = MyShapes, // Formas personalizadas\n        content = content\n    )\n}\n</code></pre>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#personalizacao-de-cores-ex-top-app-bar","title":"Personaliza\u00e7\u00e3o de Cores (Ex: Top App Bar)","text":"<p>Para mudar dinamicamente a cor de fundo de um componente como a Top App Bar, voc\u00ea geralmente usa a propriedade <code>containerColor</code> (ou <code>backgroundColor</code> em vers\u00f5es mais antigas ou dependendo do Composable espec\u00edfico).</p> <pre><code>TopAppBar(\n    title = { Text(\"Gerenciamento de Bovinos\") },\n    colors = TopAppBarDefaults.topAppBarColors(\n        containerColor = if (hasAlert) Color.Red else MaterialTheme.colorScheme.primary // Vermelho para alerta\n    )\n)\n</code></pre> <p>Dentro do <code>MaterialTheme</code>, voc\u00ea pode definir paletas de cores, tipografias e formas que ser\u00e3o automaticamente aplicadas aos componentes do Material Design.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#5-escopos-no-compose","title":"5. Escopos no Compose","text":"<p>No Jetpack Compose, \"escopos\" referem-se aos receptores impl\u00edcitos de fun\u00e7\u00f5es lambda que s\u00e3o passadas para certos Composables. Eles permitem que voc\u00ea acesse propriedades ou fun\u00e7\u00f5es espec\u00edficas do contexto do Composable pai.</p> <p>Por exemplo:</p> <p>ColumnScope: Quando voc\u00ea coloca conte\u00fado dentro de um <code>Column</code>, a lambda que define esse conte\u00fado tem um receptor <code>ColumnScope</code>. Isso permite que voc\u00ea use modificadores espec\u00edficos de Column, como <code>align(Alignment.CenterHorizontally)</code>.</p> <pre><code>Column { // This lambda has ColumnScope\n    Text(\"Item 1\", modifier = Modifier.align(Alignment.CenterHorizontally))\n    Text(\"Item 2\")\n}\n</code></pre> <p>RowScope: Similarmente, para <code>Row</code>, a lambda tem um receptor <code>RowScope</code>, permitindo modificadores como <code>weight(1f)</code> para distribuir o espa\u00e7o horizontalmente.</p> <pre><code>Row { // This lambda has RowScope\n    Text(\"Item 1\", modifier = Modifier.weight(1f))\n    Text(\"Item 2\", modifier = Modifier.weight(1f))\n}\n</code></pre> <p>Esses escopos garantem que voc\u00ea s\u00f3 possa usar modificadores que fazem sentido no contexto do layout pai, melhorando a seguran\u00e7a e a clareza do c\u00f3digo.</p>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#6-estrutura-de-navegacao-no-jetpack-compose","title":"6. Estrutura de Navega\u00e7\u00e3o no Jetpack Compose","text":"<p>A navega\u00e7\u00e3o no Jetpack Compose \u00e9 gerenciada principalmente pela biblioteca Navigation-Compose, que faz parte do Android Jetpack. Ela utiliza um grafo de navega\u00e7\u00e3o para definir os destinos e as rotas entre eles.</p> <p>Os componentes chave para a navega\u00e7\u00e3o s\u00e3o:</p> <ul> <li> <p>NavController: \u00c9 o controlador central de navega\u00e7\u00e3o. Ele \u00e9 respons\u00e1vel por navegar entre os destinos, gerenciar a back stack e passar argumentos. Voc\u00ea o obt\u00e9m usando <code>rememberNavController()</code>.</p> </li> <li> <p>NavHost: Um Composable que hospeda o grafo de navega\u00e7\u00e3o. Ele \u00e9 respons\u00e1vel por exibir o Composable correto para o destino atual.</p> </li> <li> <p>composable: Uma fun\u00e7\u00e3o que define um destino no grafo de navega\u00e7\u00e3o, associando uma rota (string) a um Composable.</p> </li> </ul>"},{"location":"PDMII/Revis%C3%B5es/Revis%C3%A3o/#estrutura-basica","title":"Estrutura B\u00e1sica:","text":"<pre><code>@Composable\nfun MyApp() {\n    val navController = rememberNavController() // 1. Obter o NavController\n\n    NavHost(\n        navController = navController, // 2. Passar o NavController para o NavHost\n        startDestination = \"list_screen\" // 3. Definir a tela inicial\n    ) {\n        // 4. Definir os destinos usando 'composable'\n        composable(\"list_screen\") {\n            // Conte\u00fado da tela de listagem\n            ListScreen(onNavigateToDetail = { navController.navigate(\"detail_screen/$it\") })\n        }\n        composable(\"detail_screen/{itemId}\") { backStackEntry -&gt;\n            // Conte\u00fado da tela de detalhes, acessando argumentos\n            val itemId = backStackEntry.arguments?.getString(\"itemId\")\n            DetailScreen(itemId = itemId)\n        }\n    }\n}\n\n@Composable\nfun ListScreen(onNavigateToDetail: (String) -&gt; Unit) {\n    Column {\n        Text(\"Tela de Listagem\")\n        Button(onClick = { onNavigateToDetail(\"bovino001\") }) {\n            Text(\"Ver Detalhes do Bovino 001\")\n        }\n    }\n}\n\n@Composable\nfun DetailScreen(itemId: String?) {\n    Column {\n        Text(\"Tela de Detalhes para: $itemId\")\n        // Exibir detalhes do bovino\n    }\n}\n</code></pre> <p>Rotas: S\u00e3o strings que identificam cada tela (\"list_screen\", \"detail_screen\").</p> <p>Argumentos: Podem ser passados entre telas, como \"{itemId}\" no exemplo.</p> <p>Navega\u00e7\u00e3o: Usa-se <code>navController.navigate(\"route_name\")</code> para ir para uma nova tela.</p> <p>Voltar: O NavController gerencia a pilha de navega\u00e7\u00e3o, permitindo que o usu\u00e1rio volte para a tela anterior com o bot\u00e3o \"Voltar\" do sistema.</p> <p>Este documento de revis\u00e3o serve como um guia abrangente para os conceitos essenciais do Jetpack Compose, preparando voc\u00ea para desenvolver aplica\u00e7\u00f5es Android modernas e reativas.</p>"},{"location":"TP1/1.1%20Fundamentos/","title":"1.1 Fundamentos","text":""},{"location":"TP1/1.1%20Fundamentos/#fundamentos-da-linguagem-java-e-tipos-de-dados","title":"Fundamentos da Linguagem Java e Tipos de Dados","text":"<p>A linguagem de programa\u00e7\u00e3o Java \u00e9 uma poderosa ferramenta, conhecida por sua capacidade de ser executada em diferentes sistemas operacionais. Isso \u00e9 poss\u00edvel gra\u00e7as \u00e0 M\u00e1quina Virtual Java (JVM), que interpreta o c\u00f3digo compilado (bytecode) para a plataforma espec\u00edfica.</p> <p>O ponto de partida de qualquer aplica\u00e7\u00e3o Java \u00e9 o m\u00e9todo <code>main</code>. Ele \u00e9 a porta de entrada do seu programa. Sem ele, a JVM n\u00e3o sabe por onde come\u00e7ar.</p> <p>Estrutura da Classe Principal</p> <pre><code>public class MinhaPrimeiraClasse {\n    public static void main(String[] args) {\n        // O c\u00f3digo do seu programa come\u00e7a aqui\n    }\n}\n</code></pre> <p>As vari\u00e1veis s\u00e3o espa\u00e7os reservados na mem\u00f3ria do computador para armazenar dados. Cada vari\u00e1vel tem um tipo de dado (que define o tipo de informa\u00e7\u00e3o que pode ser armazenada) e um nome.</p> <p>Tipos de Dados e Vari\u00e1veis</p> <pre><code>int idade = 30; // Tipo inteiro\ndouble altura = 1.75; // Tipo de ponto flutuante\nString nome = \"Maria\"; // Tipo texto\nboolean estaAtivo = true; // Tipo l\u00f3gico\n</code></pre> <p>Para interagir com o usu\u00e1rio, o Java utiliza a classe <code>Scanner</code>. Ela permite ler dados do teclado. Para us\u00e1-la, voc\u00ea precisa import\u00e1-la com a linha <code>import java.util.Scanner;</code>.</p> <p>Entrada de Dados com Scanner</p> <pre><code>import java.util.Scanner;\n\npublic class ExemploEntrada {\n    public static void main(String[] args) {\n        Scanner entrada = new Scanner(System.in);\n        System.out.print(\"Digite sua idade: \");\n        int idade = entrada.nextInt();\n        System.out.println(\"Sua idade \u00e9: \" + idade);\n        entrada.close();\n    }\n}\n</code></pre> <p>A sa\u00edda de dados \u00e9 controlada pela classe <code>System.out</code>. A diferen\u00e7a entre os dois m\u00e9todos principais \u00e9:</p> <ul> <li><code>System.out.print(...)</code>: Imprime o conte\u00fado na tela, mantendo o cursor na mesma linha.</li> <li><code>System.out.println(...)</code>: Imprime o conte\u00fado na tela e avan\u00e7a para a pr\u00f3xima linha (quebra de linha).</li> </ul> <p>Sa\u00edda de Dados com <code>print</code> e <code>println</code></p> <pre><code>public class ExemploSaida {\n    public static void main(String[] args) {\n        System.out.print(\"Ol\u00e1, \");\n        System.out.println(\"Mundo!\");\n        // Sa\u00edda: Ol\u00e1, Mundo!\n    }\n}\n</code></pre> <p>Para formatar valores decimais, como moeda ou percentuais, voc\u00ea pode usar a classe <code>DecimalFormat</code> ou o m\u00e9todo <code>System.out.printf</code>.</p> <p>Formata\u00e7\u00e3o de Valores</p> <pre><code>import java.text.DecimalFormat;\n\npublic class ExemploFormatacao {\n    public static void main(String[] args) {\n        double valor = 123.4567;\n        DecimalFormat df = new DecimalFormat(\"0.00\");\n\n        System.out.println(\"Valor formatado com DecimalFormat: \" + df.format(valor));\n        System.out.printf(\"Valor formatado com printf: %.2f\", valor);\n        // Sa\u00edda:\n        // Valor formatado com DecimalFormat: 123,46\n        // Valor formatado com printf: 123,46\n    }\n}\n</code></pre>"},{"location":"TP1/1.1%20Fundamentos/#revisao-completa","title":"Revis\u00e3o Completa","text":"<p>Este c\u00f3digo demonstra a leitura de um sal\u00e1rio e um percentual de reajuste, o c\u00e1lculo do novo sal\u00e1rio e a exibi\u00e7\u00e3o do resultado com formata\u00e7\u00e3o decimal.</p> <pre><code>import java.util.Scanner;\nimport java.text.DecimalFormat;\n\npublic class CalculoSalario {\n    public static void main(String[] args) {\n        Scanner entrada = new Scanner(System.in);\n        DecimalFormat deci = new DecimalFormat(\"0.00\");\n\n        System.out.println(\"Digite o sal\u00e1rio mensal atual: \");\n        double salario = entrada.nextDouble();\n\n        System.out.println(\"Digite o percentual de reajuste: \");\n        double percentual = entrada.nextDouble();\n\n        double novoSalario = salario + (salario * percentual / 100);\n\n        System.out.println(\"--- Resultado ---\");\n        System.out.println(\"Sal\u00e1rio anterior: R$ \" + deci.format(salario));\n        System.out.println(\"Percentual de reajuste: \" + deci.format(percentual) + \"%\");\n        System.out.println(\"Novo Sal\u00e1rio (DecimalFormat): R$ \" + deci.format(novoSalario));\n\n        System.out.printf(\"Novo Sal\u00e1rio (printf): R$ %.2f\", novoSalario);\n\n        entrada.close();\n    }\n}\n</code></pre>"},{"location":"TP1/1.2%20Programa%C3%A7%C3%A3o%20Estruturada/","title":"1.2 Programa\u00e7\u00e3o Estruturada","text":""},{"location":"TP1/1.2%20Programa%C3%A7%C3%A3o%20Estruturada/#programacao-estruturada-entrada-processamento-e-saida-de-dados","title":"Programa\u00e7\u00e3o Estruturada: Entrada, Processamento e Sa\u00edda de Dados","text":"<p>A programa\u00e7\u00e3o estruturada \u00e9 um modelo que segue um fluxo l\u00f3gico e sequencial de instru\u00e7\u00f5es, geralmente dividido em tr\u00eas fases: Entrada, Processamento e Sa\u00edda.</p> <p>Entrada de Dados (Input): Fase em que o programa recebe informa\u00e7\u00f5es do usu\u00e1rio. A classe <code>Scanner</code> possui diversos m\u00e9todos para ler tipos diferentes de dados.</p> <p>M\u00e9todos de Entrada de Dados</p> <pre><code>import java.util.Scanner;\n\npublic class LeituraDeDados {\n    public static void main(String[] args) {\n        Scanner entrada = new Scanner(System.in);\n\n        System.out.print(\"Digite um n\u00famero inteiro: \");\n        int numero = entrada.nextInt();\n\n        System.out.print(\"Digite um n\u00famero com v\u00edrgula: \");\n        double decimal = entrada.nextDouble();\n\n        System.out.print(\"Digite uma palavra: \");\n        String palavra = entrada.next();\n\n        System.out.println(\"Voc\u00ea digitou: \" + numero + \", \" + decimal + \", \" + palavra);\n\n        entrada.close();\n    }\n}\n</code></pre> <p>Processamento: Fase onde o programa realiza os c\u00e1lculos ou a l\u00f3gica de neg\u00f3cio com os dados de entrada.</p> <p>Processamento Simples</p> <pre><code>double valor = 100.0;\ndouble taxa = 0.10;\ndouble resultado = valor + (valor * taxa);\n</code></pre> <p>Sa\u00edda de Dados (Output): Fase em que o programa exibe o resultado do processamento.</p> <p>Sa\u00edda de Dados Formatada</p> <pre><code>double valorFinal = 110.0;\nSystem.out.println(\"O valor final \u00e9: R$\" + valorFinal);\n// Sa\u00edda: O valor final \u00e9: R$110.0\n</code></pre>"},{"location":"TP1/1.2%20Programa%C3%A7%C3%A3o%20Estruturada/#revisao-completa","title":"Revis\u00e3o Completa","text":"<p>Este c\u00f3digo demonstra o fluxo completo de entrada, processamento e sa\u00edda para calcular o valor de uma presta\u00e7\u00e3o em atraso.</p> <pre><code>import java.util.Scanner;\n\npublic class PrestacaoAtraso {\n    public static void main(String[] args) {\n        Scanner entrada = new Scanner(System.in);\n\n        // Entrada de dados\n        System.out.println(\"Digite o valor da presta\u00e7\u00e3o: \");\n        double valor = entrada.nextDouble();\n\n        System.out.println(\"Digite a taxa de juros (%): \");\n        double taxa = entrada.nextDouble();\n\n        System.out.println(\"Digite a quantidade de meses em atraso: \");\n        int tempo = entrada.nextInt();\n\n        // Processamento\n        double valorAtraso = valor + (valor * (taxa / 100) * tempo);\n\n        // Sa\u00edda\n        System.out.println(\"O valor total da presta\u00e7\u00e3o em atraso \u00e9: R$ \" + valorAtraso);\n\n        entrada.close();\n    }\n}\n</code></pre>"},{"location":"TP1/1.3%20Estruturas%20de%20Controle/","title":"1.3 Estruturas de Controle","text":""},{"location":"TP1/1.3%20Estruturas%20de%20Controle/#estruturas-de-controle-lacos-de-repeticao-e-colecoes","title":"Estruturas de Controle, La\u00e7os de Repeti\u00e7\u00e3o e Cole\u00e7\u00f5es","text":"<p>As estruturas de controle e os la\u00e7os de repeti\u00e7\u00e3o s\u00e3o essenciais para tomar decis\u00f5es e executar blocos de c\u00f3digo de forma repetida.</p> <p>Estruturas de Controle (Decis\u00e3o): O <code>if</code> e o <code>if-else</code> permitem que o programa execute blocos de c\u00f3digo com base em uma condi\u00e7\u00e3o.</p> <p>Uso do <code>if</code> e <code>if-else</code></p> <pre><code>int idade = 18;\nif (idade &gt;= 18) {\n    System.out.println(\"Voc\u00ea \u00e9 maior de idade.\");\n} else {\n    System.out.println(\"Voc\u00ea \u00e9 menor de idade.\");\n}\n</code></pre> <p>O <code>switch</code> \u00e9 uma estrutura de controle de fluxo que testa uma vari\u00e1vel contra uma lista de valores. \u00c9 uma alternativa mais limpa e eficiente para o uso de m\u00faltiplos <code>if-else if</code> para o mesmo prop\u00f3sito.</p> <p>Uso do <code>switch</code></p> <pre><code>int diaDaSemana = 3;\nString nomeDoDia;\n\nswitch (diaDaSemana) {\n    case 1:\n        nomeDoDia = \"Domingo\";\n        break;\n    case 2:\n        nomeDoDia = \"Segunda-feira\";\n        break;\n    case 3:\n        nomeDoDia = \"Ter\u00e7a-feira\";\n        break;\n    default:\n        nomeDoDia = \"Dia inv\u00e1lido\";\n        break;\n}\n\nSystem.out.println(\"O dia da semana \u00e9: \" + nomeDoDia);\n// Sa\u00edda: O dia da semana \u00e9: Ter\u00e7a-feira\n</code></pre> <p>La\u00e7os de Repeti\u00e7\u00e3o: O la\u00e7o <code>for</code> \u00e9 ideal para executar um bloco de c\u00f3digo um n\u00famero fixo de vezes.</p> <p>Uso do <code>for</code></p> <pre><code>for (int i = 0; i &lt; 5; i++) {\n    System.out.println(\"Contagem: \" + i);\n}\n// Sa\u00edda:\n// Contagem: 0\n// Contagem: 1\n// Contagem: 2\n// Contagem: 3\n// Contagem: 4\n</code></pre> <p>Cole\u00e7\u00f5es (Arrays e Matrizes): Um array armazena uma cole\u00e7\u00e3o de elementos do mesmo tipo.</p> <p>Cria\u00e7\u00e3o e Acesso a um Array</p> <pre><code>String[] nomes = new String[3]; // Cria um array de 3 posi\u00e7\u00f5es\nnomes[0] = \"Ana\";\nnomes[1] = \"Bruno\";\nnomes[2] = \"Carla\";\n\nSystem.out.println(\"O nome na segunda posi\u00e7\u00e3o \u00e9: \" + nomes[1]);\n// Sa\u00edda: O nome na segunda posi\u00e7\u00e3o \u00e9: Bruno\n</code></pre> <p>Uma matriz \u00e9 um array bidimensional, que armazena dados em linhas e colunas.</p> <p>Cria\u00e7\u00e3o e Acesso a uma Matriz</p> <pre><code>int[][] numeros = new int[2][2]; // Matriz 2x2\nnumeros[0][0] = 1;\nnumeros[0][1] = 2;\nnumeros[1][0] = 3;\nnumeros[1][1] = 4;\n\nSystem.out.println(\"Elemento da linha 1, coluna 2: \" + numeros[0][1]);\n// Sa\u00edda: Elemento da linha 1, coluna 2: 2\n</code></pre>"},{"location":"TP1/1.3%20Estruturas%20de%20Controle/#revisao-completa","title":"Revis\u00e3o Completa","text":"<p>Este exemplo demonstra o uso de um la\u00e7o <code>for</code> para preencher um array de notas, calcular a m\u00e9dia e, em seguida, usar uma estrutura de controle <code>if</code> para verificar a aprova\u00e7\u00e3o.</p> <pre><code>import java.util.Scanner;\n\npublic class NotasAlunos {\n    public static void main(String[] args) {\n        Scanner entrada = new Scanner(System.in);\n\n        // Declara\u00e7\u00e3o e inicializa\u00e7\u00e3o de um array de 3 posi\u00e7\u00f5es para notas\n        double[] notas = new double[3];\n        double soma = 0;\n\n        // La\u00e7o de repeti\u00e7\u00e3o for para ler as notas\n        for (int i = 0; i &lt; notas.length; i++) {\n            System.out.print(\"Digite a nota \" + (i + 1) + \": \");\n            notas[i] = entrada.nextDouble();\n            soma += notas[i];\n        }\n\n        // C\u00e1lculo da m\u00e9dia\n        double media = soma / notas.length;\n\n        // Estrutura de controle if-else para verificar aprova\u00e7\u00e3o\n        System.out.println(\"\\n--- Resultado ---\");\n        System.out.printf(\"M\u00e9dia das notas: %.2f\\n\", media);\n\n        if (media &gt;= 7.0) {\n            System.out.println(\"Parab\u00e9ns! Voc\u00ea foi aprovado!\");\n        } else {\n            System.out.println(\"Infelizmente, voc\u00ea foi reprovado.\");\n        }\n\n        entrada.close();\n    }\n}\n</code></pre>"},{"location":"TP1/1.4%20Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos%20%28POO%29/","title":"1.4 Programa\u00e7\u00e3o Orientada a Objetos (POO)","text":""},{"location":"TP1/1.4%20Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos%20%28POO%29/#introducao-a-programacao-orientada-a-objetos-poo","title":"Introdu\u00e7\u00e3o \u00e0 Programa\u00e7\u00e3o Orientada a Objetos (POO)","text":"<p>A Programa\u00e7\u00e3o Orientada a Objetos (POO) organiza o c\u00f3digo em torno de objetos, que s\u00e3o abstra\u00e7\u00f5es do mundo real.</p> <p>A classe \u00e9 um modelo, um \"projeto\" ou um \"molde\" que define a estrutura e o comportamento de um tipo de objeto.</p> <p>Cria\u00e7\u00e3o de uma Classe</p> <pre><code>public class Pessoa {\n    // Atributos da classe\n    private String nome;\n    private int idade;\n\n    // M\u00e9todos (a\u00e7\u00f5es) da classe\n    public void falar() {\n        System.out.println(\"Ol\u00e1, meu nome \u00e9 \" + this.nome);\n    }\n}\n</code></pre> <p>Um objeto \u00e9 uma inst\u00e2ncia concreta de uma classe.</p> <p>Cria\u00e7\u00e3o de um Objeto</p> <pre><code>Pessoa pessoa1 = new Pessoa(); // Instanciando um novo objeto\n</code></pre> <p>Os atributos s\u00e3o as caracter\u00edsticas de um objeto, enquanto os m\u00e9todos s\u00e3o as a\u00e7\u00f5es que ele pode executar.</p> <p>O Encapsulamento protege os dados internos de um objeto, garantindo que eles s\u00f3 possam ser acessados ou modificados de forma controlada. Para isso, usamos m\u00e9todos <code>getters</code> (para ler o valor de um atributo) e <code>setters</code> (para modificar o valor de um atributo).</p> <p>Getters e Setters</p> <pre><code>public class Produto {\n    private String nome;\n    private double preco;\n\n    public String getNome() { // Getter para o nome\n        return this.nome;\n    }\n\n    public void setNome(String novoNome) { // Setter para o nome\n        this.nome = novoNome;\n    }\n}\n</code></pre> <p>Modificadores de Acesso</p> <p>Os modificadores de acesso controlam a visibilidade de classes, atributos e m\u00e9todos. Eles s\u00e3o fundamentais para o encapsulamento. Os principais s\u00e3o:</p> <ul> <li><code>public</code>: Acess\u00edvel de qualquer classe.</li> <li><code>private</code>: Acess\u00edvel apenas dentro da pr\u00f3pria classe.</li> <li><code>protected</code>: Acess\u00edvel dentro da pr\u00f3pria classe, por classes filhas (heran\u00e7a) e por classes do mesmo pacote.</li> <li>(Sem modificador): Acess\u00edvel apenas por classes do mesmo pacote.</li> </ul> <p>Exemplo de Modificadores de Acesso</p> <pre><code>class ExemploAcesso {\n    public int atributoPublico;\n    private int atributoPrivado;\n    protected int atributoProtegido;\n    int atributoPadrao; // Acesso default (pacote)\n\n    public void metodoPublico() {\n        System.out.println(\"Este m\u00e9todo \u00e9 p\u00fablico.\");\n    }\n\n    private void metodoPrivado() {\n        System.out.println(\"Este m\u00e9todo \u00e9 privado.\");\n    }\n}\n\nclass OutraClasse {\n    public void testarAcesso() {\n        ExemploAcesso obj = new ExemploAcesso();\n        obj.atributoPublico = 10; // Funciona\n        // obj.atributoPrivado = 20; // ERRO: Atributo privado\n        // obj.metodoPrivado(); // ERRO: M\u00e9todo privado\n    }\n}\n</code></pre> <p>Construtores</p> <p>O construtor \u00e9 um m\u00e9todo especial que \u00e9 chamado automaticamente quando um objeto \u00e9 criado. Ele serve para inicializar os atributos do objeto, garantindo que ele seja criado em um estado v\u00e1lido. Ele tem o mesmo nome da classe e n\u00e3o possui tipo de retorno. \u00c9 poss\u00edvel ter m\u00faltiplos construtores com diferentes par\u00e2metros (sobrecarga).</p> <p>Construtores</p> <pre><code>public class Carro {\n    String modelo;\n    int ano;\n\n    // Construtor com dois par\u00e2metros\n    public Carro(String modelo, int ano) {\n        this.modelo = modelo;\n        this.ano = ano;\n    }\n}\n</code></pre> <p>M\u00e9todos com e sem Retorno</p> <p>Em Java, a distin\u00e7\u00e3o entre o que o usu\u00e1rio chamou de \"m\u00e9todo sem retorno\" e \"fun\u00e7\u00e3o com retorno\" \u00e9 feita pelo tipo de retorno do m\u00e9todo.</p> <ul> <li> <p>M\u00e9todo sem retorno (tipo <code>void</code>): \u00c9 usado para executar uma a\u00e7\u00e3o, mas n\u00e3o retorna nenhum valor ao final de sua execu\u00e7\u00e3o. O tipo de retorno \u00e9 especificado pela palavra-chave <code>void</code>.</p> </li> <li> <p>M\u00e9todo com retorno (tipo de dado): \u00c9 usado para executar uma a\u00e7\u00e3o e, ao final, retornar um valor de um tipo de dado espec\u00edfico (como <code>int</code>, <code>String</code>, <code>double</code>, etc.). A palavra-chave <code>return</code> \u00e9 usada para especificar o valor a ser retornado.</p> </li> </ul> <p>Exemplo de M\u00e9todos com e sem Retorno</p> <pre><code>public class Calculadora {\n    // M\u00e9todo sem retorno (void)\n    public void imprimirSoma(int a, int b) {\n        int resultado = a + b;\n        System.out.println(\"A soma \u00e9: \" + resultado);\n    }\n\n    // M\u00e9todo com retorno (int)\n    public int calcularSoma(int a, int b) {\n        int resultado = a + b;\n        return resultado; // Retorna um valor do tipo int\n    }\n}\n</code></pre>"},{"location":"TP1/1.4%20Programa%C3%A7%C3%A3o%20Orientada%20a%20Objetos%20%28POO%29/#revisao-completa","title":"Revis\u00e3o Completa","text":"<p>Este exemplo demonstra como criar uma classe <code>Cliente</code> com atributos privados, e como usar um construtor para inicializar esses dados, al\u00e9m dos <code>getters</code> e <code>setters</code>.</p> <p>Classe <code>Cliente.java</code></p> <pre><code>public class Cliente {\n    // Atributos privados\n    private String nome;\n    private String end;\n    private String rg;\n\n    // Construtor para inicializar o objeto\n    public Cliente(String nome, String end, String rg) {\n        this.nome = nome;\n        this.end = end;\n        this.rg = rg;\n        System.out.println(\"Cliente \" + this.nome + \" cadastrado com sucesso.\");\n    }\n\n    // M\u00e9todos Getters e Setters para encapsulamento\n    public String getNome() {\n        return this.nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getEnd() {\n        return this.end;\n    }\n\n    public void setEnd(String end) {\n        this.end = end;\n    }\n\n    public String getRg() {\n        return this.rg;\n    }\n\n    public void setRg(String rg) {\n        this.rg = rg;\n    }\n}\n</code></pre> <p>Classe <code>Principal.java</code></p> <pre><code>public class Principal {\n    public static void main(String[] args) {\n        // Criando um objeto da classe Cliente usando o construtor\n        Cliente cliente1 = new Cliente(\"Jo\u00e3o da Silva\", \"Rua da Programa\u00e7\u00e3o, 123\", \"12.345.678-9\");\n\n        // Usando os m\u00e9todos getter para exibir valores\n        System.out.println(\"Nome: \" + cliente1.getNome());\n        System.out.println(\"Endere\u00e7o: \" + cliente1.getEnd());\n        System.out.println(\"RG: \" + cliente1.getRg());\n    }\n}\n</code></pre>"}]}